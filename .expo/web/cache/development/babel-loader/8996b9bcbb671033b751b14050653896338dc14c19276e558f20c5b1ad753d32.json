{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = fromArrayOrSpread;\nvar _invariant = _interopRequireDefault(require(\"../../common/invariant\"));\nvar _logger = _interopRequireDefault(require(\"../../common/logger\"));\nfunction fromArrayOrSpread(args, debugName, debugArgName) {\n  if (Array.isArray(args[0])) {\n    (0, _invariant.default)(1 === args.length, \"\".concat(debugName, \" should be called with either a list of '\").concat(debugArgName, \"' arguments or a single array, but multiple arrays were passed\"));\n    return args[0];\n  }\n  if ('production' !== process.env.NODE_ENV) {\n    if (200 < args.length) {\n      _logger.default.warn(\"\".concat(debugName, \" was called with \").concat(args.length, \" arguments. It might be a performance bug. For very large arrays, pass a single array instead of a spread to avoid \\\"Maximum callstack exceeded\\\" error.\"));\n    }\n  }\n  return args;\n}","map":{"version":3,"names":["_interopRequireDefault","require","exports","__esModule","default","fromArrayOrSpread","_invariant","_logger","args","debugName","debugArgName","Array","isArray","length","concat","process","env","NODE_ENV","warn"],"sources":["/app/node_modules/@nozbe/watermelondb/utils/fp/arrayOrSpread/index.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = fromArrayOrSpread;\nvar _invariant = _interopRequireDefault(require(\"../../common/invariant\"));\nvar _logger = _interopRequireDefault(require(\"../../common/logger\"));\n// This helper makes it easy to make functions that can take either spread or array arguments\nfunction fromArrayOrSpread(args, debugName, debugArgName) {\n  if (Array.isArray(args[0])) {\n    (0, _invariant.default)(1 === args.length, \"\".concat(debugName, \" should be called with either a list of '\").concat(debugArgName, \"' arguments or a single array, but multiple arrays were passed\"));\n    return args[0];\n  }\n  if ('production' !== process.env.NODE_ENV) {\n    if (200 < args.length) {\n      _logger.default.warn(\"\".concat(debugName, \" was called with \").concat(args.length, \" arguments. It might be a performance bug. For very large arrays, pass a single array instead of a spread to avoid \\\"Maximum callstack exceeded\\\" error.\"));\n    }\n  }\n  return args;\n}"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAA8C,CAAC;AACpFC,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACE,OAAO,GAAGC,iBAAiB;AACnC,IAAIC,UAAU,GAAGN,sBAAsB,CAACC,OAAO,yBAAyB,CAAC,CAAC;AAC1E,IAAIM,OAAO,GAAGP,sBAAsB,CAACC,OAAO,sBAAsB,CAAC,CAAC;AAEpE,SAASI,iBAAiBA,CAACG,IAAI,EAAEC,SAAS,EAAEC,YAAY,EAAE;EACxD,IAAIC,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;IAC1B,CAAC,CAAC,EAAEF,UAAU,CAACF,OAAO,EAAE,CAAC,KAAKI,IAAI,CAACK,MAAM,EAAE,EAAE,CAACC,MAAM,CAACL,SAAS,EAAE,2CAA2C,CAAC,CAACK,MAAM,CAACJ,YAAY,EAAE,gEAAgE,CAAC,CAAC;IACpM,OAAOF,IAAI,CAAC,CAAC,CAAC;EAChB;EACA,IAAI,YAAY,KAAKO,OAAO,CAACC,GAAG,CAACC,QAAQ,EAAE;IACzC,IAAI,GAAG,GAAGT,IAAI,CAACK,MAAM,EAAE;MACrBN,OAAO,CAACH,OAAO,CAACc,IAAI,CAAC,EAAE,CAACJ,MAAM,CAACL,SAAS,EAAE,mBAAmB,CAAC,CAACK,MAAM,CAACN,IAAI,CAACK,MAAM,EAAE,0JAA0J,CAAC,CAAC;IACjP;EACF;EACA,OAAOL,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}