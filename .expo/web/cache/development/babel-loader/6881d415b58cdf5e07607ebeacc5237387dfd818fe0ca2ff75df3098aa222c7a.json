{"ast":null,"code":"\"use strict\";\n\nimport { getLocales } from \"./module\";\nexport function findBestLanguageTag(languageTags) {\n  var locales = getLocales();\n  var loweredLanguageTags = languageTags.map(function (tag) {\n    return tag.toLowerCase();\n  });\n  for (var i = 0; i < locales.length; i++) {\n    var currentLocale = locales[i];\n    if (!currentLocale) {\n      continue;\n    }\n    var languageTag = currentLocale.languageTag,\n      languageCode = currentLocale.languageCode,\n      scriptCode = currentLocale.scriptCode,\n      countryCode = currentLocale.countryCode,\n      isRTL = currentLocale.isRTL;\n    var combinaisons = [languageTag, !!scriptCode ? languageCode + \"-\" + scriptCode : null, languageCode + \"-\" + countryCode, languageCode].filter(function (value) {\n      return !!value;\n    });\n    for (var j = 0; j < combinaisons.length; j++) {\n      var _combinaisons$j;\n      var combinaison = (_combinaisons$j = combinaisons[j]) == null ? void 0 : _combinaisons$j.toLowerCase();\n      if (!combinaison) {\n        continue;\n      }\n      var tagIndex = loweredLanguageTags.indexOf(combinaison);\n      var _languageTag = languageTags[tagIndex];\n      if (_languageTag && tagIndex !== -1) {\n        return {\n          languageTag: _languageTag,\n          isRTL: isRTL\n        };\n      }\n    }\n  }\n}\nexport { getCalendar, getCountry, getCurrencies, getLocales, getNumberFormatSettings, getTemperatureUnit, getTimeZone, openAppLanguageSettings, uses24HourClock, usesAutoDateAndTime, usesAutoTimeZone, usesMetricSystem } from \"./module\";\nexport * from \"./types\";","map":{"version":3,"names":["getLocales","findBestLanguageTag","languageTags","locales","loweredLanguageTags","map","tag","toLowerCase","i","length","currentLocale","languageTag","languageCode","scriptCode","countryCode","isRTL","combinaisons","filter","value","j","_combinaisons$j","combinaison","tagIndex","indexOf","getCalendar","getCountry","getCurrencies","getNumberFormatSettings","getTemperatureUnit","getTimeZone","openAppLanguageSettings","uses24HourClock","usesAutoDateAndTime","usesAutoTimeZone","usesMetricSystem"],"sources":["/app/node_modules/react-native-localize/src/index.ts"],"sourcesContent":["import { getLocales } from \"./module\";\n\nexport function findBestLanguageTag<T extends string>(\n  languageTags: ReadonlyArray<T>,\n): { languageTag: T; isRTL: boolean } | undefined {\n  const locales = getLocales();\n  const loweredLanguageTags = languageTags.map((tag) => tag.toLowerCase());\n\n  for (let i = 0; i < locales.length; i++) {\n    const currentLocale = locales[i];\n\n    if (!currentLocale) {\n      continue;\n    }\n\n    const { languageTag, languageCode, scriptCode, countryCode, isRTL } =\n      currentLocale;\n\n    const combinaisons = [\n      languageTag,\n      !!scriptCode ? languageCode + \"-\" + scriptCode : null,\n      languageCode + \"-\" + countryCode,\n      languageCode,\n    ].filter((value): value is string => !!value);\n\n    for (let j = 0; j < combinaisons.length; j++) {\n      const combinaison = combinaisons[j]?.toLowerCase();\n\n      if (!combinaison) {\n        continue;\n      }\n\n      const tagIndex = loweredLanguageTags.indexOf(combinaison);\n      const languageTag = languageTags[tagIndex];\n\n      if (languageTag && tagIndex !== -1) {\n        return { languageTag, isRTL };\n      }\n    }\n  }\n}\n\nexport {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  openAppLanguageSettings,\n  uses24HourClock,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n  usesMetricSystem,\n} from \"./module\";\nexport * from \"./types\";\n"],"mappings":";;AAAA,SAASA,UAAU;AAEnB,OAAO,SAASC,mBAAmBA,CACjCC,YAA8B,EACkB;EAChD,IAAMC,OAAO,GAAGH,UAAU,CAAC,CAAC;EAC5B,IAAMI,mBAAmB,GAAGF,YAAY,CAACG,GAAG,CAAE,UAAAC,GAAG;IAAA,OAAKA,GAAG,CAACC,WAAW,CAAC,CAAC;EAAA,EAAC;EAExE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,OAAO,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IACvC,IAAME,aAAa,GAAGP,OAAO,CAACK,CAAC,CAAC;IAEhC,IAAI,CAACE,aAAa,EAAE;MAClB;IACF;IAEA,IAAQC,WAAW,GACjBD,aAAa,CADPC,WAAW;MAAEC,YAAY,GAC/BF,aAAa,CADME,YAAY;MAAEC,UAAU,GAC3CH,aAAa,CADoBG,UAAU;MAAEC,WAAW,GACxDJ,aAAa,CADgCI,WAAW;MAAEC,KAAA,GAC1DL,aAAa,CAD6CK,KAAA;IAG5D,IAAMC,YAAY,GAAG,CACnBL,WAAW,EACX,CAAC,CAACE,UAAU,GAAGD,YAAY,GAAG,GAAG,GAAGC,UAAU,GAAG,IAAI,EACrDD,YAAY,GAAG,GAAG,GAAGE,WAAW,EAChCF,YAAY,CACb,CAACK,MAAM,CAAE,UAAAC,KAAK;MAAA,OAAsB,CAAC,CAACA,KAAK;IAAA,EAAC;IAE7C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,YAAY,CAACP,MAAM,EAAEU,CAAC,EAAE,EAAE;MAAA,IAAAC,eAAA;MAC5C,IAAMC,WAAW,IAAAD,eAAA,GAAGJ,YAAY,CAACG,CAAC,CAAC,qBAAfC,eAAA,CAAiBb,WAAW,CAAC,CAAC;MAElD,IAAI,CAACc,WAAW,EAAE;QAChB;MACF;MAEA,IAAMC,QAAQ,GAAGlB,mBAAmB,CAACmB,OAAO,CAACF,WAAW,CAAC;MACzD,IAAMV,YAAW,GAAGT,YAAY,CAACoB,QAAQ,CAAC;MAE1C,IAAIX,YAAW,IAAIW,QAAQ,KAAK,CAAC,CAAC,EAAE;QAClC,OAAO;UAAEX,WAAW,EAAXA,YAAW;UAAEI,KAAA,EAAAA;QAAM,CAAC;MAC/B;IACF;EACF;AACF;AAEA,SACES,WAAW,EACXC,UAAU,EACVC,aAAa,EACb1B,UAAU,EACV2B,uBAAuB,EACvBC,kBAAkB,EAClBC,WAAW,EACXC,uBAAuB,EACvBC,eAAe,EACfC,mBAAmB,EACnBC,gBAAgB,EAChBC,gBAAgB;AAElB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}