{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport * as Notifications from 'expo-notifications';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport var NotificationService = function () {\n  function NotificationService() {\n    _classCallCheck(this, NotificationService);\n    this.configureNotifications();\n  }\n  return _createClass(NotificationService, [{\n    key: \"configureNotifications\",\n    value: function configureNotifications() {\n      Notifications.setNotificationHandler({\n        handleNotification: function () {\n          var _handleNotification = _asyncToGenerator(function* () {\n            return {\n              shouldShowAlert: true,\n              shouldPlaySound: true,\n              shouldSetBadge: true\n            };\n          });\n          function handleNotification() {\n            return _handleNotification.apply(this, arguments);\n          }\n          return handleNotification;\n        }()\n      });\n    }\n  }, {\n    key: \"requestPermissions\",\n    value: function () {\n      var _requestPermissions = _asyncToGenerator(function* () {\n        if (Platform.OS === 'web') {\n          console.log('Notifications are simulated on web platform');\n          return true;\n        }\n        var _yield$Notifications$ = yield Notifications.getPermissionsAsync(),\n          existingStatus = _yield$Notifications$.status;\n        var finalStatus = existingStatus;\n        if (existingStatus !== 'granted') {\n          var _yield$Notifications$2 = yield Notifications.requestPermissionsAsync(),\n            status = _yield$Notifications$2.status;\n          finalStatus = status;\n        }\n        if (finalStatus !== 'granted') {\n          console.log('Failed to get push token for push notification!');\n          return false;\n        }\n        if (Platform.OS === 'android') {\n          yield Notifications.setNotificationChannelAsync('default', {\n            name: 'default',\n            importance: Notifications.AndroidImportance.MAX,\n            vibrationPattern: [0, 250, 250, 250],\n            lightColor: '#A855F7'\n          });\n        }\n        return true;\n      });\n      function requestPermissions() {\n        return _requestPermissions.apply(this, arguments);\n      }\n      return requestPermissions;\n    }()\n  }, {\n    key: \"scheduleOverdueNotification\",\n    value: function () {\n      var _scheduleOverdueNotification = _asyncToGenerator(function* (item) {\n        var hasPermission = yield this.requestPermissions();\n        if (!hasPermission) {\n          throw new Error('Notification permissions not granted');\n        }\n        if (Platform.OS === 'web') {\n          console.log(\"Would schedule notification for item: \" + item.itemName);\n          return \"web-notification-\" + item.id + \"-\" + Date.now();\n        }\n        var oneDayAfterDue = new Date(item.expectedReturnDate);\n        oneDayAfterDue.setDate(oneDayAfterDue.getDate() + 1);\n        oneDayAfterDue.setHours(10, 0, 0, 0);\n        var trigger = oneDayAfterDue.getTime() - Date.now();\n        if (trigger <= 0) {\n          var _notificationId = yield Notifications.scheduleNotificationAsync({\n            content: {\n              title: 'Item Overdue! ðŸ”´',\n              body: \"\\\"\" + item.itemName + \"\\\" borrowed by \" + item.borrowerName + \" is overdue\",\n              data: {\n                itemId: item.id\n              },\n              categoryIdentifier: 'overdue'\n            },\n            trigger: null\n          });\n          return _notificationId;\n        }\n        var notificationId = yield Notifications.scheduleNotificationAsync({\n          content: {\n            title: 'Item Overdue! ðŸ”´',\n            body: \"\\\"\" + item.itemName + \"\\\" borrowed by \" + item.borrowerName + \" was due yesterday\",\n            data: {\n              itemId: item.id\n            },\n            categoryIdentifier: 'overdue'\n          },\n          trigger: {\n            seconds: Math.floor(trigger / 1000)\n          }\n        });\n        this.scheduleWeeklyReminder(item, 7);\n        return notificationId;\n      });\n      function scheduleOverdueNotification(_x) {\n        return _scheduleOverdueNotification.apply(this, arguments);\n      }\n      return scheduleOverdueNotification;\n    }()\n  }, {\n    key: \"scheduleWeeklyReminder\",\n    value: function () {\n      var _scheduleWeeklyReminder = _asyncToGenerator(function* (item, daysFromNow) {\n        if (Platform.OS === 'web') {\n          console.log(\"Would schedule weekly reminder for item: \" + item.itemName);\n          return;\n        }\n        var reminderDate = new Date();\n        reminderDate.setDate(reminderDate.getDate() + daysFromNow);\n        reminderDate.setHours(10, 0, 0, 0);\n        yield Notifications.scheduleNotificationAsync({\n          content: {\n            title: 'Reminder: Item Still Overdue! ðŸ”´',\n            body: \"\\\"\" + item.itemName + \"\\\" borrowed by \" + item.borrowerName + \" is \" + daysFromNow + \" days overdue\",\n            data: {\n              itemId: item.id\n            },\n            categoryIdentifier: 'reminder'\n          },\n          trigger: {\n            seconds: Math.floor((reminderDate.getTime() - Date.now()) / 1000)\n          }\n        });\n      });\n      function scheduleWeeklyReminder(_x2, _x3) {\n        return _scheduleWeeklyReminder.apply(this, arguments);\n      }\n      return scheduleWeeklyReminder;\n    }()\n  }, {\n    key: \"cancelNotification\",\n    value: function () {\n      var _cancelNotification = _asyncToGenerator(function* (notificationId) {\n        if (Platform.OS === 'web') {\n          console.log(\"Would cancel notification: \" + notificationId);\n          return;\n        }\n        yield Notifications.cancelScheduledNotificationAsync(notificationId);\n      });\n      function cancelNotification(_x4) {\n        return _cancelNotification.apply(this, arguments);\n      }\n      return cancelNotification;\n    }()\n  }, {\n    key: \"cancelAllNotifications\",\n    value: function () {\n      var _cancelAllNotifications = _asyncToGenerator(function* () {\n        if (Platform.OS === 'web') {\n          console.log('Would cancel all notifications');\n          return;\n        }\n        yield Notifications.cancelAllScheduledNotificationsAsync();\n      });\n      function cancelAllNotifications() {\n        return _cancelAllNotifications.apply(this, arguments);\n      }\n      return cancelAllNotifications;\n    }()\n  }, {\n    key: \"getScheduledNotifications\",\n    value: function () {\n      var _getScheduledNotifications = _asyncToGenerator(function* () {\n        if (Platform.OS === 'web') {\n          return [];\n        }\n        return yield Notifications.getAllScheduledNotificationsAsync();\n      });\n      function getScheduledNotifications() {\n        return _getScheduledNotifications.apply(this, arguments);\n      }\n      return getScheduledNotifications;\n    }()\n  }]);\n}();","map":{"version":3,"names":["Notifications","Platform","NotificationService","_classCallCheck","configureNotifications","_createClass","key","value","setNotificationHandler","handleNotification","_handleNotification","_asyncToGenerator","shouldShowAlert","shouldPlaySound","shouldSetBadge","apply","arguments","_requestPermissions","OS","console","log","_yield$Notifications$","getPermissionsAsync","existingStatus","status","finalStatus","_yield$Notifications$2","requestPermissionsAsync","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","requestPermissions","_scheduleOverdueNotification","item","hasPermission","Error","itemName","id","Date","now","oneDayAfterDue","expectedReturnDate","setDate","getDate","setHours","trigger","getTime","notificationId","scheduleNotificationAsync","content","title","body","borrowerName","data","itemId","categoryIdentifier","seconds","Math","floor","scheduleWeeklyReminder","scheduleOverdueNotification","_x","_scheduleWeeklyReminder","daysFromNow","reminderDate","_x2","_x3","_cancelNotification","cancelScheduledNotificationAsync","cancelNotification","_x4","_cancelAllNotifications","cancelAllScheduledNotificationsAsync","cancelAllNotifications","_getScheduledNotifications","getAllScheduledNotificationsAsync","getScheduledNotifications"],"sources":["/app/src/infrastructure/notifications/NotificationService.ts"],"sourcesContent":["import * as Notifications from 'expo-notifications';\nimport { Platform } from 'react-native';\nimport { ILentItem } from '@/domain/entities/LentItem';\n\nexport interface INotificationService {\n  requestPermissions(): Promise<boolean>;\n  scheduleOverdueNotification(item: ILentItem): Promise<string>;\n  cancelNotification(notificationId: string): Promise<void>;\n  cancelAllNotifications(): Promise<void>;\n}\n\nexport class NotificationService implements INotificationService {\n  constructor() {\n    this.configureNotifications();\n  }\n\n  private configureNotifications() {\n    Notifications.setNotificationHandler({\n      handleNotification: async () => ({\n        shouldShowAlert: true,\n        shouldPlaySound: true,\n        shouldSetBadge: true,\n      }),\n    });\n  }\n\n  async requestPermissions(): Promise<boolean> {\n    if (Platform.OS === 'web') {\n      // On web, we'll just return true as we can't really schedule push notifications\n      console.log('Notifications are simulated on web platform');\n      return true;\n    }\n\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n\n    if (finalStatus !== 'granted') {\n      console.log('Failed to get push token for push notification!');\n      return false;\n    }\n\n    if (Platform.OS === 'android') {\n      await Notifications.setNotificationChannelAsync('default', {\n        name: 'default',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#A855F7',\n      });\n    }\n\n    return true;\n  }\n\n  async scheduleOverdueNotification(item: ILentItem): Promise<string> {\n    const hasPermission = await this.requestPermissions();\n    if (!hasPermission) {\n      throw new Error('Notification permissions not granted');\n    }\n\n    if (Platform.OS === 'web') {\n      // On web, we'll just simulate the notification ID\n      console.log(`Would schedule notification for item: ${item.itemName}`);\n      return `web-notification-${item.id}-${Date.now()}`;\n    }\n\n    // Schedule notification for 1 day after due date\n    const oneDayAfterDue = new Date(item.expectedReturnDate);\n    oneDayAfterDue.setDate(oneDayAfterDue.getDate() + 1);\n    oneDayAfterDue.setHours(10, 0, 0, 0); // 10 AM\n\n    const trigger = oneDayAfterDue.getTime() - Date.now();\n    \n    if (trigger <= 0) {\n      // Item is already overdue, schedule immediate notification\n      const notificationId = await Notifications.scheduleNotificationAsync({\n        content: {\n          title: 'Item Overdue! ðŸ”´',\n          body: `\"${item.itemName}\" borrowed by ${item.borrowerName} is overdue`,\n          data: { itemId: item.id },\n          categoryIdentifier: 'overdue',\n        },\n        trigger: null, // Immediate\n      });\n      return notificationId;\n    }\n\n    const notificationId = await Notifications.scheduleNotificationAsync({\n      content: {\n        title: 'Item Overdue! ðŸ”´',\n        body: `\"${item.itemName}\" borrowed by ${item.borrowerName} was due yesterday`,\n        data: { itemId: item.id },\n        categoryIdentifier: 'overdue',\n      },\n      trigger: {\n        seconds: Math.floor(trigger / 1000),\n      },\n    });\n\n    // Schedule weekly reminders if still not returned\n    this.scheduleWeeklyReminder(item, 7);\n\n    return notificationId;\n  }\n\n  private async scheduleWeeklyReminder(item: ILentItem, daysFromNow: number): Promise<void> {\n    if (Platform.OS === 'web') {\n      console.log(`Would schedule weekly reminder for item: ${item.itemName}`);\n      return;\n    }\n\n    const reminderDate = new Date();\n    reminderDate.setDate(reminderDate.getDate() + daysFromNow);\n    reminderDate.setHours(10, 0, 0, 0);\n\n    await Notifications.scheduleNotificationAsync({\n      content: {\n        title: 'Reminder: Item Still Overdue! ðŸ”´',\n        body: `\"${item.itemName}\" borrowed by ${item.borrowerName} is ${daysFromNow} days overdue`,\n        data: { itemId: item.id },\n        categoryIdentifier: 'reminder',\n      },\n      trigger: {\n        seconds: Math.floor((reminderDate.getTime() - Date.now()) / 1000),\n      },\n    });\n  }\n\n  async cancelNotification(notificationId: string): Promise<void> {\n    if (Platform.OS === 'web') {\n      console.log(`Would cancel notification: ${notificationId}`);\n      return;\n    }\n    await Notifications.cancelScheduledNotificationAsync(notificationId);\n  }\n\n  async cancelAllNotifications(): Promise<void> {\n    if (Platform.OS === 'web') {\n      console.log('Would cancel all notifications');\n      return;\n    }\n    await Notifications.cancelAllScheduledNotificationsAsync();\n  }\n\n  async getScheduledNotifications() {\n    if (Platform.OS === 'web') {\n      return [];\n    }\n    return await Notifications.getAllScheduledNotificationsAsync();\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}