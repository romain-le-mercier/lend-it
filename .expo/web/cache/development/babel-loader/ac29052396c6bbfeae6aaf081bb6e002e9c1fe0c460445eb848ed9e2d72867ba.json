{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = checkName;\nvar _invariant = _interopRequireDefault(require(\"../../common/invariant\"));\nvar safeNameCharacters = /^[a-zA-Z_]\\w*$/;\nvar knownSafeNames = new Set();\nfunction checkName(name) {\n  if (knownSafeNames.has(name)) {\n    return name;\n  }\n  (0, _invariant.default)('string' === typeof name, \"Unsafe name '\".concat(name, \"' not allowed (not a string)\"));\n  (0, _invariant.default)(!['__proto__', 'constructor', 'prototype', 'hasOwnProperty', 'isPrototypeOf', 'toString', 'toLocaleString', 'valueOf'].includes(name), \"Unsafe name '\".concat(name, \"' not allowed (Object prototype property)\"));\n  (0, _invariant.default)('$loki' !== name.toLowerCase(), \"Unsafe name '\".concat(name, \"' not allowed (reserved for LokiJS compatibility)\"));\n  (0, _invariant.default)(!['rowid', 'oid', '_rowid_', 'sqlite_master'].includes(name.toLowerCase()), \"Unsafe name '\".concat(name, \"' not allowed (reserved for SQLite compatibility)\"));\n  (0, _invariant.default)(!name.toLowerCase().startsWith('sqlite_stat'), \"Unsafe name '\".concat(name, \"' not allowed (reserved for SQLite compatibility)\"));\n  (0, _invariant.default)(!name.startsWith('__'), \"Unsafe name '\".concat(name, \"' not allowed (names starting with '__' are reserved for internal purposes)\"));\n  (0, _invariant.default)(safeNameCharacters.test(name), \"Unsafe name '\".concat(name, \"' not allowed (names must contain only safe characters \").concat(safeNameCharacters.toString(), \")\"));\n  knownSafeNames.add(name);\n  return name;\n}","map":{"version":3,"names":["_interopRequireDefault","require","exports","__esModule","default","checkName","_invariant","safeNameCharacters","knownSafeNames","Set","name","has","concat","includes","toLowerCase","startsWith","test","toString","add"],"sources":["/app/node_modules/@nozbe/watermelondb/utils/fp/checkName/index.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = checkName;\nvar _invariant = _interopRequireDefault(require(\"../../common/invariant\"));\n// Asserts that `name` (table or column name) should be safe for inclusion in SQL queries\n// and Loki queries (JS objects)\n//\n// IMPORTANT: This should NEVER be used as the only line of defense! These checks may be incomplete.\n// Any table or column name passed anywhere near the database should be hardcoded or whitelisted.\n// This is a \"defense in depth\" type of check - checking for common mistakes in case library user\n// is not following safe coding practices or the primary defense fails.\n//\n// This will throw an error on:\n// - JavaScript Object prototype properties\n// - Magic Loki and SQLite column names\n// - names starting with __\n// - names that are not essentially alphanumeric\n//\n// Note that for SQL, you always MUST wrap table/column names with `'name'`, otherwise query may fail\n// for some keywords\n//\n// Note that this doesn't throw for Watermelon builtins (id, _changed, _status...)\nvar safeNameCharacters = /^[a-zA-Z_]\\w*$/;\nvar knownSafeNames = new Set();\nfunction checkName(name) {\n  if (knownSafeNames.has(name)) {\n    return name;\n  }\n  (0, _invariant.default)('string' === typeof name, \"Unsafe name '\".concat(name, \"' not allowed (not a string)\"));\n  (0, _invariant.default)(!['__proto__', 'constructor', 'prototype', 'hasOwnProperty', 'isPrototypeOf', 'toString', 'toLocaleString', 'valueOf'].includes(name), \"Unsafe name '\".concat(name, \"' not allowed (Object prototype property)\"));\n  (0, _invariant.default)('$loki' !== name.toLowerCase(), \"Unsafe name '\".concat(name, \"' not allowed (reserved for LokiJS compatibility)\"));\n  (0, _invariant.default)(!['rowid', 'oid', '_rowid_', 'sqlite_master'].includes(name.toLowerCase()), \"Unsafe name '\".concat(name, \"' not allowed (reserved for SQLite compatibility)\"));\n  (0, _invariant.default)(!name.toLowerCase().startsWith('sqlite_stat'), \"Unsafe name '\".concat(name, \"' not allowed (reserved for SQLite compatibility)\"));\n  (0, _invariant.default)(!name.startsWith('__'), \"Unsafe name '\".concat(name, \"' not allowed (names starting with '__' are reserved for internal purposes)\"));\n  (0, _invariant.default)(safeNameCharacters.test(name), \"Unsafe name '\".concat(name, \"' not allowed (names must contain only safe characters \").concat(safeNameCharacters.toString(), \")\"));\n  knownSafeNames.add(name);\n  return name;\n}"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAA8C,CAAC;AACpFC,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACE,OAAO,GAAGC,SAAS;AAC3B,IAAIC,UAAU,GAAGN,sBAAsB,CAACC,OAAO,yBAAyB,CAAC,CAAC;AAmB1E,IAAIM,kBAAkB,GAAG,gBAAgB;AACzC,IAAIC,cAAc,GAAG,IAAIC,GAAG,CAAC,CAAC;AAC9B,SAASJ,SAASA,CAACK,IAAI,EAAE;EACvB,IAAIF,cAAc,CAACG,GAAG,CAACD,IAAI,CAAC,EAAE;IAC5B,OAAOA,IAAI;EACb;EACA,CAAC,CAAC,EAAEJ,UAAU,CAACF,OAAO,EAAE,QAAQ,KAAK,OAAOM,IAAI,EAAE,eAAe,CAACE,MAAM,CAACF,IAAI,EAAE,8BAA8B,CAAC,CAAC;EAC/G,CAAC,CAAC,EAAEJ,UAAU,CAACF,OAAO,EAAE,CAAC,CAAC,WAAW,EAAE,aAAa,EAAE,WAAW,EAAE,gBAAgB,EAAE,eAAe,EAAE,UAAU,EAAE,gBAAgB,EAAE,SAAS,CAAC,CAACS,QAAQ,CAACH,IAAI,CAAC,EAAE,eAAe,CAACE,MAAM,CAACF,IAAI,EAAE,2CAA2C,CAAC,CAAC;EACzO,CAAC,CAAC,EAAEJ,UAAU,CAACF,OAAO,EAAE,OAAO,KAAKM,IAAI,CAACI,WAAW,CAAC,CAAC,EAAE,eAAe,CAACF,MAAM,CAACF,IAAI,EAAE,mDAAmD,CAAC,CAAC;EAC1I,CAAC,CAAC,EAAEJ,UAAU,CAACF,OAAO,EAAE,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,eAAe,CAAC,CAACS,QAAQ,CAACH,IAAI,CAACI,WAAW,CAAC,CAAC,CAAC,EAAE,eAAe,CAACF,MAAM,CAACF,IAAI,EAAE,mDAAmD,CAAC,CAAC;EACtL,CAAC,CAAC,EAAEJ,UAAU,CAACF,OAAO,EAAE,CAACM,IAAI,CAACI,WAAW,CAAC,CAAC,CAACC,UAAU,CAAC,aAAa,CAAC,EAAE,eAAe,CAACH,MAAM,CAACF,IAAI,EAAE,mDAAmD,CAAC,CAAC;EACzJ,CAAC,CAAC,EAAEJ,UAAU,CAACF,OAAO,EAAE,CAACM,IAAI,CAACK,UAAU,CAAC,IAAI,CAAC,EAAE,eAAe,CAACH,MAAM,CAACF,IAAI,EAAE,6EAA6E,CAAC,CAAC;EAC5J,CAAC,CAAC,EAAEJ,UAAU,CAACF,OAAO,EAAEG,kBAAkB,CAACS,IAAI,CAACN,IAAI,CAAC,EAAE,eAAe,CAACE,MAAM,CAACF,IAAI,EAAE,yDAAyD,CAAC,CAACE,MAAM,CAACL,kBAAkB,CAACU,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;EAC1LT,cAAc,CAACU,GAAG,CAACR,IAAI,CAAC;EACxB,OAAOA,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}