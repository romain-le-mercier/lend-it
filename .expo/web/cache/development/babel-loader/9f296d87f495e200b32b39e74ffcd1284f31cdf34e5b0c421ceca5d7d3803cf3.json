{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nexports.setExperimentalAllowsFatalError = setExperimentalAllowsFatalError;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _logger = _interopRequireDefault(require(\"../../../utils/common/logger\"));\nvar _invariant = _interopRequireDefault(require(\"../../../utils/common/invariant\"));\nvar _RawRecord = require(\"../../../RawRecord\");\nvar _lokiExtensions = require(\"./lokiExtensions\");\nvar _executeQuery = require(\"./executeQuery\");\nvar SCHEMA_VERSION_KEY = '_loki_schema_version';\nvar experimentalAllowsFatalError = false;\nfunction setExperimentalAllowsFatalError() {\n  experimentalAllowsFatalError = true;\n}\nvar DatabaseDriver = function () {\n  function DatabaseDriver(options) {\n    this.cachedRecords = new Map();\n    this._isBroken = false;\n    var schema = options.schema,\n      migrations = options.migrations;\n    this.options = options;\n    this.schema = schema;\n    this.migrations = migrations;\n  }\n  var _proto = DatabaseDriver.prototype;\n  _proto.setUp = function setUp() {\n    return new Promise(function ($return, $error) {\n      return Promise.resolve(this._openDatabase()).then(function () {\n        try {\n          return Promise.resolve(this._migrateIfNeeded()).then(function () {\n            try {\n              return $return();\n            } catch ($boundEx) {\n              return $error($boundEx);\n            }\n          }, $error);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this), $error);\n    }.bind(this));\n  };\n  _proto.isCached = function isCached(table, id) {\n    var cachedSet = this.cachedRecords.get(table);\n    return cachedSet ? cachedSet.has(id) : false;\n  };\n  _proto.markAsCached = function markAsCached(table, id) {\n    var cachedSet = this.cachedRecords.get(table);\n    if (cachedSet) {\n      cachedSet.add(id);\n    } else {\n      this.cachedRecords.set(table, new Set([id]));\n    }\n  };\n  _proto.removeFromCache = function removeFromCache(table, id) {\n    var cachedSet = this.cachedRecords.get(table);\n    if (cachedSet) {\n      cachedSet.delete(id);\n    }\n  };\n  _proto.clearCachedRecords = function clearCachedRecords() {\n    this.cachedRecords = new Map();\n  };\n  _proto.getCache = function getCache(table) {\n    var cache = this.cachedRecords.get(table);\n    if (cache) {\n      return cache;\n    }\n    var newCache = new Set([]);\n    this.cachedRecords.set(table, newCache);\n    return newCache;\n  };\n  _proto.find = function find(table, id) {\n    if (this.isCached(table, id)) {\n      return id;\n    }\n    var raw = this.loki.getCollection(table).by('id', id);\n    if (!raw) {\n      return null;\n    }\n    this.markAsCached(table, id);\n    return (0, _RawRecord.sanitizedRaw)(raw, this.schema.tables[table]);\n  };\n  _proto.query = function query(_query) {\n    var records = (0, _executeQuery.executeQuery)(_query, this.loki);\n    return this._compactQueryResults(records, _query.table);\n  };\n  _proto.queryIds = function queryIds(query) {\n    return (0, _executeQuery.executeQuery)(query, this.loki).map(function (record) {\n      return record.id;\n    });\n  };\n  _proto.unsafeQueryRaw = function unsafeQueryRaw(query) {\n    return (0, _executeQuery.executeQuery)(query, this.loki);\n  };\n  _proto.count = function count(query) {\n    return (0, _executeQuery.executeCount)(query, this.loki);\n  };\n  _proto.batch = function batch(operations) {\n    var _this = this;\n    this._assertNotBroken();\n    try {\n      var recordsToCreate = {};\n      operations.forEach(function (operation) {\n        var _operation = _slicedToArray(operation, 3),\n          type = _operation[0],\n          table = _operation[1],\n          raw = _operation[2];\n        switch (type) {\n          case 'create':\n            if (!recordsToCreate[table]) {\n              recordsToCreate[table] = [];\n            }\n            recordsToCreate[table].push(raw);\n            break;\n          default:\n            break;\n        }\n      });\n      Object.entries(recordsToCreate).forEach(function (args) {\n        var _args = _slicedToArray(args, 2),\n          table = _args[0],\n          raws = _args[1];\n        var shouldRebuildIndexAfterInsert = 1000 <= raws.length;\n        _this.loki.getCollection(table).insert(raws, shouldRebuildIndexAfterInsert);\n        var cache = _this.getCache(table);\n        raws.forEach(function (raw) {\n          cache.add(raw.id);\n        });\n      });\n      operations.forEach(function (operation) {\n        var _operation2 = _slicedToArray(operation, 3),\n          type = _operation2[0],\n          table = _operation2[1],\n          rawOrId = _operation2[2];\n        var collection = _this.loki.getCollection(table);\n        switch (type) {\n          case 'update':\n            var lokiId = collection.by('id', rawOrId.id).$loki;\n            var raw = rawOrId;\n            raw.$loki = lokiId;\n            collection.update(raw);\n            break;\n          case 'markAsDeleted':\n            var id = rawOrId;\n            var record = collection.by('id', id);\n            if (record) {\n              record._status = 'deleted';\n              collection.update(record);\n              _this.removeFromCache(table, id);\n            }\n            break;\n          case 'destroyPermanently':\n            var _id = rawOrId;\n            var _record = collection.by('id', _id);\n            _record && collection.remove(_record);\n            _this.removeFromCache(table, _id);\n            break;\n          default:\n            break;\n        }\n      });\n    } catch (error) {\n      this._fatalError(error);\n    }\n  };\n  _proto.getDeletedRecords = function getDeletedRecords(table) {\n    return this.loki.getCollection(table).find({\n      _status: {\n        $eq: 'deleted'\n      }\n    }).map(function (record) {\n      return record.id;\n    });\n  };\n  _proto.unsafeExecute = function unsafeExecute(operations) {\n    if ('production' !== process.env.NODE_ENV) {\n      (0, _invariant.default)(operations && 'object' === typeof operations && 1 === Object.keys(operations).length && 'function' === typeof operations.loki, 'unsafeExecute expects an { loki: loki => { ... } } object');\n    }\n    var lokiBlock = operations.loki;\n    lokiBlock(this.loki);\n  };\n  _proto.unsafeResetDatabase = function unsafeResetDatabase() {\n    return new Promise(function ($return, $error) {\n      return Promise.resolve((0, _lokiExtensions.deleteDatabase)(this.loki)).then(function () {\n        try {\n          this.cachedRecords.clear();\n          _logger.default.log('[Loki] Database is now reset');\n          return Promise.resolve(this._openDatabase()).then(function () {\n            try {\n              this._setUpSchema();\n              return $return();\n            } catch ($boundEx) {\n              return $error($boundEx);\n            }\n          }.bind(this), $error);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this), $error);\n    }.bind(this));\n  };\n  _proto.getLocal = function getLocal(key) {\n    var record = this._findLocal(key);\n    return record ? record.value : null;\n  };\n  _proto.setLocal = function setLocal(key, value) {\n    this._assertNotBroken();\n    try {\n      var record = this._findLocal(key);\n      if (record) {\n        record.value = value;\n        this._localStorage.update(record);\n      } else {\n        this._localStorage.insert({\n          key: key,\n          value: value\n        });\n      }\n    } catch (error) {\n      this._fatalError(error);\n    }\n  };\n  _proto.removeLocal = function removeLocal(key) {\n    this._assertNotBroken();\n    try {\n      var record = this._findLocal(key);\n      if (record) {\n        this._localStorage.remove(record);\n      }\n    } catch (error) {\n      this._fatalError(error);\n    }\n  };\n  _proto._openDatabase = function _openDatabase() {\n    return new Promise(function ($return, $error) {\n      _logger.default.log('[Loki] Initializing IndexedDB');\n      return Promise.resolve((0, _lokiExtensions.newLoki)(this.options)).then(function ($await_13) {\n        try {\n          this.loki = $await_13;\n          _logger.default.log('[Loki] Database loaded');\n          return $return();\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this), $error);\n    }.bind(this));\n  };\n  _proto._setUpSchema = function _setUpSchema() {\n    var _this2 = this;\n    _logger.default.log('[Loki] Setting up schema');\n    var tables = Object.values(this.schema.tables);\n    tables.forEach(function (tableSchema) {\n      _this2._addCollection(tableSchema);\n    });\n    this.loki.addCollection('local_storage', {\n      unique: ['key'],\n      indices: [],\n      disableMeta: true\n    });\n    this._databaseVersion = this.schema.version;\n    _logger.default.log('[Loki] Database collections set up');\n  };\n  _proto._addCollection = function _addCollection(tableSchema) {\n    var name = tableSchema.name,\n      columnArray = tableSchema.columnArray;\n    var indexedColumns = columnArray.reduce(function (indexes, column) {\n      return column.isIndexed ? indexes.concat([column.name]) : indexes;\n    }, []);\n    this.loki.addCollection(name, {\n      unique: ['id'],\n      indices: ['_status'].concat((0, _toConsumableArray2.default)(indexedColumns)),\n      disableMeta: true\n    });\n  };\n  _proto._migrateIfNeeded = function _migrateIfNeeded() {\n    return new Promise(function ($return, $error) {\n      var dbVersion, schemaVersion, migrationSteps;\n      dbVersion = this._databaseVersion;\n      schemaVersion = this.schema.version;\n      if (dbVersion === schemaVersion) {\n        return $If_5.call(this);\n      } else {\n        if (0 === dbVersion) {\n          _logger.default.log('[Loki] Empty database, setting up');\n          return Promise.resolve(this.unsafeResetDatabase()).then(function () {\n            try {\n              return $If_6.call(this);\n            } catch ($boundEx) {\n              return $error($boundEx);\n            }\n          }.bind(this), $error);\n        } else {\n          if (0 < dbVersion && dbVersion < schemaVersion) {\n            _logger.default.log('[Loki] Database has old schema version. Migration is required.');\n            migrationSteps = this._getMigrationSteps(dbVersion);\n            if (migrationSteps) {\n              _logger.default.log(\"[Loki] Migrating from version \".concat(dbVersion, \" to \").concat(this.schema.version, \"...\"));\n              var $Try_4_Post = function () {\n                try {\n                  return $If_8.call(this);\n                } catch ($boundEx) {\n                  return $error($boundEx);\n                }\n              }.bind(this);\n              var $Try_4_Catch = function $Try_4_Catch(error) {\n                try {\n                  _logger.default.error('[Loki] Migration failed', error);\n                  throw error;\n                } catch ($boundEx) {\n                  return $error($boundEx);\n                }\n              };\n              try {\n                return Promise.resolve(this._migrate(migrationSteps)).then(function () {\n                  try {\n                    return $Try_4_Post();\n                  } catch ($boundEx) {\n                    return $Try_4_Catch($boundEx);\n                  }\n                }, $Try_4_Catch);\n              } catch (error) {\n                $Try_4_Catch(error);\n              }\n            } else {\n              _logger.default.warn('[Loki] Migrations not available for this version range, resetting database instead');\n              return Promise.resolve(this.unsafeResetDatabase()).then(function () {\n                try {\n                  return $If_8.call(this);\n                } catch ($boundEx) {\n                  return $error($boundEx);\n                }\n              }.bind(this), $error);\n            }\n            function $If_8() {\n              return $If_7.call(this);\n            }\n          } else {\n            _logger.default.warn(\"[Loki] Database has newer version \".concat(dbVersion, \" than app schema \").concat(schemaVersion, \". Resetting database.\"));\n            return Promise.resolve(this.unsafeResetDatabase()).then(function () {\n              try {\n                return $If_7.call(this);\n              } catch ($boundEx) {\n                return $error($boundEx);\n              }\n            }.bind(this), $error);\n          }\n          function $If_7() {\n            return $If_6.call(this);\n          }\n        }\n        function $If_6() {\n          return $If_5.call(this);\n        }\n      }\n      function $If_5() {\n        return $return();\n      }\n    }.bind(this));\n  };\n  _proto._getMigrationSteps = function _getMigrationSteps(fromVersion) {\n    var migrations = this.migrations;\n    if (!migrations) {\n      return null;\n    }\n    var _require = require(\"../../../Schema/migrations/stepsForMigration\"),\n      stepsForMigration = _require.stepsForMigration;\n    return stepsForMigration({\n      migrations: migrations,\n      fromVersion: fromVersion,\n      toVersion: this.schema.version\n    });\n  };\n  _proto._migrate = function _migrate(steps) {\n    return new Promise(function ($return) {\n      var _this3 = this;\n      steps.forEach(function (step) {\n        if ('create_table' === step.type) {\n          _this3._executeCreateTableMigration(step);\n        } else if ('add_columns' === step.type) {\n          _this3._executeAddColumnsMigration(step);\n        } else if (!('sql' === step.type)) {\n          throw new Error(\"Unsupported migration step \".concat(step.type));\n        }\n      });\n      this._databaseVersion = this.schema.version;\n      _logger.default.log(\"[Loki] Migration successful\");\n      return $return();\n    }.bind(this));\n  };\n  _proto._executeCreateTableMigration = function _executeCreateTableMigration(_ref) {\n    var schema = _ref.schema;\n    this._addCollection(schema);\n  };\n  _proto._executeAddColumnsMigration = function _executeAddColumnsMigration(_ref2) {\n    var table = _ref2.table,\n      columns = _ref2.columns;\n    var collection = this.loki.getCollection(table);\n    collection.findAndUpdate({}, function (record) {\n      columns.forEach(function (column) {\n        (0, _RawRecord.setRawSanitized)(record, column.name, null, column);\n      });\n    });\n    columns.forEach(function (column) {\n      if (column.isIndexed) {\n        collection.ensureIndex(column.name);\n      }\n    });\n  };\n  _proto._compactQueryResults = function _compactQueryResults(records, table) {\n    var _this4 = this;\n    var cache = this.getCache(table);\n    return records.map(function (raw) {\n      var id = raw.id;\n      if (cache.has(id)) {\n        return id;\n      }\n      cache.add(id);\n      return (0, _RawRecord.sanitizedRaw)(raw, _this4.schema.tables[table]);\n    });\n  };\n  _proto._findLocal = function _findLocal(key) {\n    var localStorage = this._localStorage;\n    return localStorage && localStorage.by('key', key);\n  };\n  _proto._assertNotBroken = function _assertNotBroken() {\n    if (this._isBroken) {\n      throw new Error('DatabaseDriver is in a broken state, bailing...');\n    }\n  };\n  _proto._fatalError = function _fatalError(error) {\n    if (!experimentalAllowsFatalError) {\n      _logger.default.warn('DatabaseDriver is broken, but experimentalAllowsFatalError has not been enabled to do anything about it...');\n      throw error;\n    }\n    this._isBroken = true;\n    (0, _lokiExtensions.lokiFatalError)(this.loki);\n    _logger.default.error('DatabaseDriver is broken. App must be reloaded before continuing.');\n    var handler = this.options._onFatalError;\n    handler && handler(error);\n    throw error;\n  };\n  (0, _createClass2.default)(DatabaseDriver, [{\n    key: \"_databaseVersion\",\n    get: function get() {\n      var databaseVersionRaw = this.getLocal(SCHEMA_VERSION_KEY) || '';\n      return parseInt(databaseVersionRaw, 10) || 0;\n    },\n    set: function set(version) {\n      this.setLocal(SCHEMA_VERSION_KEY, \"\".concat(version));\n    }\n  }, {\n    key: \"_localStorage\",\n    get: function get() {\n      return this.loki.getCollection('local_storage');\n    }\n  }]);\n  return DatabaseDriver;\n}();\nexports.default = DatabaseDriver;","map":{"version":3,"names":["_slicedToArray","require","_interopRequireDefault","exports","__esModule","default","setExperimentalAllowsFatalError","_toConsumableArray2","_createClass2","_logger","_invariant","_RawRecord","_lokiExtensions","_executeQuery","SCHEMA_VERSION_KEY","experimentalAllowsFatalError","DatabaseDriver","options","cachedRecords","Map","_isBroken","schema","migrations","_proto","prototype","setUp","Promise","$return","$error","resolve","_openDatabase","then","_migrateIfNeeded","$boundEx","bind","isCached","table","id","cachedSet","get","has","markAsCached","add","set","Set","removeFromCache","delete","clearCachedRecords","getCache","cache","newCache","find","raw","loki","getCollection","by","sanitizedRaw","tables","query","_query","records","executeQuery","_compactQueryResults","queryIds","map","record","unsafeQueryRaw","count","executeCount","batch","operations","_this","_assertNotBroken","recordsToCreate","forEach","operation","_operation","type","push","Object","entries","args","_args","raws","shouldRebuildIndexAfterInsert","length","insert","_operation2","rawOrId","collection","lokiId","$loki","update","_status","_id","_record","remove","error","_fatalError","getDeletedRecords","$eq","unsafeExecute","process","env","NODE_ENV","keys","lokiBlock","unsafeResetDatabase","deleteDatabase","clear","log","_setUpSchema","getLocal","key","_findLocal","value","setLocal","_localStorage","removeLocal","newLoki","$await_13","_this2","values","tableSchema","_addCollection","addCollection","unique","indices","disableMeta","_databaseVersion","version","name","columnArray","indexedColumns","reduce","indexes","column","isIndexed","concat","dbVersion","schemaVersion","migrationSteps","$If_5","call","$If_6","_getMigrationSteps","$Try_4_Post","$If_8","$Try_4_Catch","_migrate","warn","$If_7","fromVersion","_require","stepsForMigration","toVersion","steps","_this3","step","_executeCreateTableMigration","_executeAddColumnsMigration","Error","_ref","_ref2","columns","findAndUpdate","setRawSanitized","ensureIndex","_this4","localStorage","lokiFatalError","handler","_onFatalError","databaseVersionRaw","parseInt"],"sources":["/app/node_modules/@nozbe/watermelondb/adapters/lokijs/worker/DatabaseDriver.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nexports.setExperimentalAllowsFatalError = setExperimentalAllowsFatalError;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _logger = _interopRequireDefault(require(\"../../../utils/common/logger\"));\nvar _invariant = _interopRequireDefault(require(\"../../../utils/common/invariant\"));\nvar _RawRecord = require(\"../../../RawRecord\");\nvar _lokiExtensions = require(\"./lokiExtensions\");\nvar _executeQuery = require(\"./executeQuery\");\n// don't import the whole utils/ here!\nvar SCHEMA_VERSION_KEY = '_loki_schema_version';\nvar experimentalAllowsFatalError = false;\nfunction setExperimentalAllowsFatalError() {\n  experimentalAllowsFatalError = true;\n}\nvar DatabaseDriver = /*#__PURE__*/function () {\n  // (experimental) if true, DatabaseDriver is in a broken state and should not be used anymore\n\n  function DatabaseDriver(options) {\n    this.cachedRecords = new Map();\n    this._isBroken = false;\n    var {\n      schema: schema,\n      migrations: migrations\n    } = options;\n    this.options = options;\n    this.schema = schema;\n    this.migrations = migrations;\n  }\n  var _proto = DatabaseDriver.prototype;\n  _proto.setUp = function setUp() {\n    return new Promise(function ($return, $error) {\n      return Promise.resolve(this._openDatabase()).then(function () {\n        try {\n          return Promise.resolve(this._migrateIfNeeded()).then(function () {\n            try {\n              return $return();\n            } catch ($boundEx) {\n              return $error($boundEx);\n            }\n          }, $error);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this), $error);\n    }.bind(this));\n  };\n  _proto.isCached = function isCached(table, id) {\n    var cachedSet = this.cachedRecords.get(table);\n    return cachedSet ? cachedSet.has(id) : false;\n  };\n  _proto.markAsCached = function markAsCached(table, id) {\n    var cachedSet = this.cachedRecords.get(table);\n    if (cachedSet) {\n      cachedSet.add(id);\n    } else {\n      this.cachedRecords.set(table, new Set([id]));\n    }\n  };\n  _proto.removeFromCache = function removeFromCache(table, id) {\n    var cachedSet = this.cachedRecords.get(table);\n    if (cachedSet) {\n      cachedSet.delete(id);\n    }\n  };\n  _proto.clearCachedRecords = function clearCachedRecords() {\n    this.cachedRecords = new Map();\n  };\n  _proto.getCache = function getCache(table) {\n    var cache = this.cachedRecords.get(table);\n    if (cache) {\n      return cache;\n    }\n    var newCache = new Set([]);\n    this.cachedRecords.set(table, newCache);\n    return newCache;\n  };\n  _proto.find = function find(table, id) {\n    if (this.isCached(table, id)) {\n      return id;\n    }\n    var raw = this.loki.getCollection(table).by('id', id);\n    if (!raw) {\n      return null;\n    }\n    this.markAsCached(table, id);\n    return (0, _RawRecord.sanitizedRaw)(raw, this.schema.tables[table]);\n  };\n  _proto.query = function query(_query) {\n    var records = (0, _executeQuery.executeQuery)(_query, this.loki);\n    return this._compactQueryResults(records, _query.table);\n  };\n  _proto.queryIds = function queryIds(query) {\n    return (0, _executeQuery.executeQuery)(query, this.loki).map(function (record) {\n      return record.id;\n    });\n  };\n  _proto.unsafeQueryRaw = function unsafeQueryRaw(query) {\n    return (0, _executeQuery.executeQuery)(query, this.loki);\n  };\n  _proto.count = function count(query) {\n    return (0, _executeQuery.executeCount)(query, this.loki);\n  };\n  _proto.batch = function batch(operations) {\n    var _this = this;\n    // NOTE: Mutations to LokiJS db are *not* transactional!\n    // This is terrible and lame for a database, but there's just no simple and good solution to this\n    // Loki transactions rely on making a full copy of the data, and reverting to it if something breaks.\n    // This is just unbearable for production-sized databases (too much memory required)\n    // It could be done with some sort of advanced journaling/CoW structure scheme, but that would\n    // be very complicated (in itself a source of bugs), and possibly quite expensive cpu-wise\n    //\n    // So instead, we assume that writes MUST succeed. If they don't, we put DatabaseDriver in a \"broken\"\n    // state, refuse to persist or further mutate the DB, and notify the app (and user) about it.\n    //\n    // It can be assumed that Loki-level mutations that fail are WatermelonDB bugs that must be fixed\n    this._assertNotBroken();\n    try {\n      var recordsToCreate = {};\n      operations.forEach(function (operation) {\n        var [type, table, raw] = operation;\n        switch (type) {\n          case 'create':\n            if (!recordsToCreate[table]) {\n              recordsToCreate[table] = [];\n            }\n            recordsToCreate[table].push(raw);\n            break;\n          default:\n            break;\n        }\n      });\n\n      // We're doing a second pass, because batch insert is much faster in Loki\n      Object.entries(recordsToCreate).forEach(function (args) {\n        var [table, raws] = args;\n        var shouldRebuildIndexAfterInsert = 1000 <= raws.length; // only profitable for large inserts\n        _this.loki.getCollection(table).insert(raws, shouldRebuildIndexAfterInsert);\n        var cache = _this.getCache(table);\n        raws.forEach(function (raw) {\n          cache.add(raw.id);\n        });\n      });\n      operations.forEach(function (operation) {\n        var [type, table, rawOrId] = operation;\n        var collection = _this.loki.getCollection(table);\n        switch (type) {\n          case 'update':\n            // Loki identifies records using internal $loki ID so we must find the saved record first\n            var lokiId = collection.by('id', rawOrId.id).$loki;\n            var raw = rawOrId;\n            raw.$loki = lokiId;\n            collection.update(raw);\n            break;\n          case 'markAsDeleted':\n            var id = rawOrId;\n            var record = collection.by('id', id);\n            if (record) {\n              record._status = 'deleted';\n              collection.update(record);\n              _this.removeFromCache(table, id);\n            }\n            break;\n          case 'destroyPermanently':\n            var _id = rawOrId;\n            var _record = collection.by('id', _id);\n            _record && collection.remove(_record);\n            _this.removeFromCache(table, _id);\n            break;\n          default:\n            break;\n        }\n      });\n    } catch (error) {\n      this._fatalError(error);\n    }\n  };\n  _proto.getDeletedRecords = function getDeletedRecords(table) {\n    return this.loki.getCollection(table).find({\n      _status: {\n        $eq: 'deleted'\n      }\n    }).map(function (record) {\n      return record.id;\n    });\n  };\n  _proto.unsafeExecute = function unsafeExecute(operations) {\n    if ('production' !== process.env.NODE_ENV) {\n      (0, _invariant.default)(operations && 'object' === typeof operations && 1 === Object.keys(operations).length && 'function' === typeof operations.loki, 'unsafeExecute expects an { loki: loki => { ... } } object');\n    }\n    var lokiBlock = operations.loki;\n    lokiBlock(this.loki);\n  };\n  _proto.unsafeResetDatabase = function unsafeResetDatabase() {\n    return new Promise(function ($return, $error) {\n      return Promise.resolve((0, _lokiExtensions.deleteDatabase)(this.loki)).then(function () {\n        try {\n          this.cachedRecords.clear();\n          _logger.default.log('[Loki] Database is now reset');\n          return Promise.resolve(this._openDatabase()).then(function () {\n            try {\n              this._setUpSchema();\n              return $return();\n            } catch ($boundEx) {\n              return $error($boundEx);\n            }\n          }.bind(this), $error);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this), $error);\n    }.bind(this));\n  }\n\n  // *** LocalStorage ***\n  ;\n  _proto.getLocal = function getLocal(key) {\n    var record = this._findLocal(key);\n    return record ? record.value : null;\n  };\n  _proto.setLocal = function setLocal(key, value) {\n    this._assertNotBroken();\n    try {\n      var record = this._findLocal(key);\n      if (record) {\n        record.value = value;\n        this._localStorage.update(record);\n      } else {\n        this._localStorage.insert({\n          key: key,\n          value: value\n        });\n      }\n    } catch (error) {\n      this._fatalError(error);\n    }\n  };\n  _proto.removeLocal = function removeLocal(key) {\n    this._assertNotBroken();\n    try {\n      var record = this._findLocal(key);\n      if (record) {\n        this._localStorage.remove(record);\n      }\n    } catch (error) {\n      this._fatalError(error);\n    }\n  }\n\n  // *** Internals ***\n  ;\n  _proto._openDatabase = function _openDatabase() {\n    return new Promise(function ($return, $error) {\n      _logger.default.log('[Loki] Initializing IndexedDB');\n      return Promise.resolve((0, _lokiExtensions.newLoki)(this.options)).then(function ($await_13) {\n        try {\n          this.loki = $await_13;\n          _logger.default.log('[Loki] Database loaded');\n          return $return();\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this), $error);\n    }.bind(this));\n  };\n  _proto._setUpSchema = function _setUpSchema() {\n    var _this2 = this;\n    _logger.default.log('[Loki] Setting up schema');\n\n    // Add collections\n    var tables = Object.values(this.schema.tables);\n    tables.forEach(function (tableSchema) {\n      _this2._addCollection(tableSchema);\n    });\n    this.loki.addCollection('local_storage', {\n      unique: ['key'],\n      indices: [],\n      disableMeta: true\n    });\n\n    // Set database version\n    this._databaseVersion = this.schema.version;\n    _logger.default.log('[Loki] Database collections set up');\n  };\n  _proto._addCollection = function _addCollection(tableSchema) {\n    var {\n      name: name,\n      columnArray: columnArray\n    } = tableSchema;\n    var indexedColumns = columnArray.reduce(function (indexes, column) {\n      return column.isIndexed ? indexes.concat([column.name]) : indexes;\n    }, []);\n    this.loki.addCollection(name, {\n      unique: ['id'],\n      indices: ['_status'].concat((0, _toConsumableArray2.default)(indexedColumns)),\n      disableMeta: true\n    });\n  };\n  _proto._migrateIfNeeded = function _migrateIfNeeded() {\n    return new Promise(function ($return, $error) {\n      var dbVersion, schemaVersion, migrationSteps;\n      dbVersion = this._databaseVersion;\n      schemaVersion = this.schema.version;\n      if (dbVersion === schemaVersion) {\n        return $If_5.call(this);\n      } // All good!\n      else {\n        if (0 === dbVersion) {\n          _logger.default.log('[Loki] Empty database, setting up');\n          return Promise.resolve(this.unsafeResetDatabase()).then(function () {\n            try {\n              return $If_6.call(this);\n            } catch ($boundEx) {\n              return $error($boundEx);\n            }\n          }.bind(this), $error);\n        } else {\n          if (0 < dbVersion && dbVersion < schemaVersion) {\n            _logger.default.log('[Loki] Database has old schema version. Migration is required.');\n            migrationSteps = this._getMigrationSteps(dbVersion);\n            if (migrationSteps) {\n              _logger.default.log(\"[Loki] Migrating from version \".concat(dbVersion, \" to \").concat(this.schema.version, \"...\"));\n              var $Try_4_Post = function () {\n                try {\n                  return $If_8.call(this);\n                } catch ($boundEx) {\n                  return $error($boundEx);\n                }\n              }.bind(this);\n              var $Try_4_Catch = function (error) {\n                try {\n                  _logger.default.error('[Loki] Migration failed', error);\n                  throw error;\n                } catch ($boundEx) {\n                  return $error($boundEx);\n                }\n              };\n              try {\n                return Promise.resolve(this._migrate(migrationSteps)).then(function () {\n                  try {\n                    return $Try_4_Post();\n                  } catch ($boundEx) {\n                    return $Try_4_Catch($boundEx);\n                  }\n                }, $Try_4_Catch);\n              } catch (error) {\n                $Try_4_Catch(error)\n              }\n            } else {\n              _logger.default.warn('[Loki] Migrations not available for this version range, resetting database instead');\n              return Promise.resolve(this.unsafeResetDatabase()).then(function () {\n                try {\n                  return $If_8.call(this);\n                } catch ($boundEx) {\n                  return $error($boundEx);\n                }\n              }.bind(this), $error);\n            }\n            function $If_8() {\n              return $If_7.call(this);\n            }\n          } else {\n            _logger.default.warn(\"[Loki] Database has newer version \".concat(dbVersion, \" than app schema \").concat(schemaVersion, \". Resetting database.\"));\n            return Promise.resolve(this.unsafeResetDatabase()).then(function () {\n              try {\n                return $If_7.call(this);\n              } catch ($boundEx) {\n                return $error($boundEx);\n              }\n            }.bind(this), $error);\n          }\n          function $If_7() {\n            return $If_6.call(this);\n          }\n        }\n        function $If_6() {\n          return $If_5.call(this);\n        }\n      }\n      function $If_5() {\n        return $return();\n      }\n    }.bind(this));\n  };\n  _proto._getMigrationSteps = function _getMigrationSteps(fromVersion) {\n    // TODO: Remove this after migrations are shipped\n    var {\n      migrations: migrations\n    } = this;\n    if (!migrations) {\n      return null;\n    }\n    var {\n      stepsForMigration: stepsForMigration\n    } = require('../../../Schema/migrations/stepsForMigration');\n    return stepsForMigration({\n      migrations: migrations,\n      fromVersion: fromVersion,\n      toVersion: this.schema.version\n    });\n  };\n  _proto._migrate = function _migrate(steps) {\n    return new Promise(function ($return) {\n      var _this3 = this;\n      steps.forEach(function (step) {\n        if ('create_table' === step.type) {\n          _this3._executeCreateTableMigration(step);\n        } else if ('add_columns' === step.type) {\n          _this3._executeAddColumnsMigration(step);\n        } else if (!('sql' === step.type)) {\n          throw new Error(\"Unsupported migration step \".concat(step.type));\n        } // ignore\n      });\n\n      // Set database version\n      this._databaseVersion = this.schema.version;\n      _logger.default.log(\"[Loki] Migration successful\");\n      return $return();\n    }.bind(this));\n  };\n  _proto._executeCreateTableMigration = function _executeCreateTableMigration({\n    schema: schema\n  }) {\n    this._addCollection(schema);\n  };\n  _proto._executeAddColumnsMigration = function _executeAddColumnsMigration({\n    table: table,\n    columns: columns\n  }) {\n    var collection = this.loki.getCollection(table);\n\n    // update ALL records in the collection, adding new fields\n    collection.findAndUpdate({}, function (record) {\n      columns.forEach(function (column) {\n        (0, _RawRecord.setRawSanitized)(record, column.name, null, column);\n      });\n    });\n\n    // add indexes, if needed\n    columns.forEach(function (column) {\n      if (column.isIndexed) {\n        collection.ensureIndex(column.name);\n      }\n    });\n  }\n\n  // Maps records to their IDs if the record is already cached on JS side\n  ;\n  _proto._compactQueryResults = function _compactQueryResults(records, table) {\n    var _this4 = this;\n    var cache = this.getCache(table);\n    return records.map(function (raw) {\n      var {\n        id: id\n      } = raw;\n      if (cache.has(id)) {\n        return id;\n      }\n      cache.add(id);\n      return (0, _RawRecord.sanitizedRaw)(raw, _this4.schema.tables[table]);\n    });\n  };\n  _proto._findLocal = function _findLocal(key) {\n    var localStorage = this._localStorage;\n    return localStorage && localStorage.by('key', key);\n  };\n  _proto._assertNotBroken = function _assertNotBroken() {\n    if (this._isBroken) {\n      throw new Error('DatabaseDriver is in a broken state, bailing...');\n    }\n  }\n\n  // (experimental)\n  // TODO: Setup, migrations, delete database should also break driver\n  ;\n  _proto._fatalError = function _fatalError(error) {\n    if (!experimentalAllowsFatalError) {\n      _logger.default.warn('DatabaseDriver is broken, but experimentalAllowsFatalError has not been enabled to do anything about it...');\n      throw error;\n    }\n    // Stop further mutations\n    this._isBroken = true;\n\n    // Disable Loki autosave\n    (0, _lokiExtensions.lokiFatalError)(this.loki);\n\n    // Notify handler\n    _logger.default.error('DatabaseDriver is broken. App must be reloaded before continuing.');\n    var handler = this.options._onFatalError;\n    handler && handler(error);\n\n    // Rethrow error\n    throw error;\n  };\n  (0, _createClass2.default)(DatabaseDriver, [{\n    key: \"_databaseVersion\",\n    get: function get() {\n      var databaseVersionRaw = this.getLocal(SCHEMA_VERSION_KEY) || '';\n      return parseInt(databaseVersionRaw, 10) || 0;\n    },\n    set: function set(version) {\n      this.setLocal(SCHEMA_VERSION_KEY, \"\".concat(version));\n    }\n  }, {\n    key: \"_localStorage\",\n    get: function get() {\n      return this.loki.getCollection('local_storage');\n    }\n  }]);\n  return DatabaseDriver;\n}();\nexports.default = DatabaseDriver;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}