{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _rx = require(\"../utils/rx\");\nvar _invariant = _interopRequireDefault(require(\"../utils/common/invariant\"));\nvar _fp = require(\"../utils/fp\");\nvar _Result = require(\"../utils/fp/Result\");\nvar _Query = _interopRequireDefault(require(\"../Query\"));\nvar _RecordCache = _interopRequireDefault(require(\"./RecordCache\"));\nvar Collection = function () {\n  function Collection(database, ModelClass) {\n    var _this = this;\n    this.changes = new _rx.Subject();\n    this._subscribers = [];\n    this.database = database;\n    this.modelClass = ModelClass;\n    this._cache = new _RecordCache.default(ModelClass.table, function (raw) {\n      return new ModelClass(_this, raw);\n    }, this);\n  }\n  var _proto = Collection.prototype;\n  _proto.find = function find(id) {\n    return new Promise(function ($return) {\n      var _this2 = this;\n      return $return((0, _Result.toPromise)(function (callback) {\n        return _this2._fetchRecord(id, callback);\n      }));\n    }.bind(this));\n  };\n  _proto.findAndObserve = function findAndObserve(id) {\n    var _this3 = this;\n    return _rx.Observable.create(function (observer) {\n      var unsubscribe = null;\n      var unsubscribed = false;\n      _this3._fetchRecord(id, function (result) {\n        if (result.value) {\n          var record = result.value;\n          observer.next(record);\n          unsubscribe = record.experimentalSubscribe(function (isDeleted) {\n            if (!unsubscribed) {\n              isDeleted ? observer.complete() : observer.next(record);\n            }\n          });\n        } else {\n          observer.error(result.error);\n        }\n      });\n      return function () {\n        unsubscribed = true;\n        unsubscribe && unsubscribe();\n      };\n    });\n  };\n  _proto.query = function query() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var clauses = (0, _fp.fromArrayOrSpread)(args, 'Collection.query', 'Clause');\n    return new _Query.default(this, clauses);\n  };\n  _proto.create = function create() {\n    var recordBuilder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _fp.noop;\n    return new Promise(function ($return, $error) {\n      var record;\n      this.database._ensureInWriter(\"Collection.create()\");\n      record = this.prepareCreate(recordBuilder);\n      return Promise.resolve(this.database.batch(record)).then(function () {\n        try {\n          return $return(record);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }, $error);\n    }.bind(this));\n  };\n  _proto.prepareCreate = function prepareCreate() {\n    var recordBuilder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _fp.noop;\n    return this.modelClass._prepareCreate(this, recordBuilder);\n  };\n  _proto.prepareCreateFromDirtyRaw = function prepareCreateFromDirtyRaw(dirtyRaw) {\n    return this.modelClass._prepareCreateFromDirtyRaw(this, dirtyRaw);\n  };\n  _proto.disposableFromDirtyRaw = function disposableFromDirtyRaw(dirtyRaw) {\n    return this.modelClass._disposableFromDirtyRaw(this, dirtyRaw);\n  };\n  _proto._fetchQuery = function _fetchQuery(query, callback) {\n    var _this4 = this;\n    this.database.adapter.underlyingAdapter.query(query.serialize(), function (result) {\n      return callback((0, _Result.mapValue)(function (rawRecords) {\n        return _this4._cache.recordsFromQueryResult(rawRecords);\n      }, result));\n    });\n  };\n  _proto._fetchIds = function _fetchIds(query, callback) {\n    this.database.adapter.underlyingAdapter.queryIds(query.serialize(), callback);\n  };\n  _proto._fetchCount = function _fetchCount(query, callback) {\n    this.database.adapter.underlyingAdapter.count(query.serialize(), callback);\n  };\n  _proto._unsafeFetchRaw = function _unsafeFetchRaw(query, callback) {\n    this.database.adapter.underlyingAdapter.unsafeQueryRaw(query.serialize(), callback);\n  };\n  _proto._fetchRecord = function _fetchRecord(id, callback) {\n    var _this5 = this;\n    if ('string' !== typeof id) {\n      callback({\n        error: new Error(\"Invalid record ID \".concat(this.table, \"#\").concat(id))\n      });\n      return;\n    }\n    var cachedRecord = this._cache.get(id);\n    if (cachedRecord) {\n      callback({\n        value: cachedRecord\n      });\n      return;\n    }\n    this.database.adapter.underlyingAdapter.find(this.table, id, function (result) {\n      return callback((0, _Result.mapValue)(function (rawRecord) {\n        (0, _invariant.default)(rawRecord, \"Record \".concat(_this5.table, \"#\").concat(id, \" not found\"));\n        return _this5._cache.recordFromQueryResult(rawRecord);\n      }, result));\n    });\n  };\n  _proto._applyChangesToCache = function _applyChangesToCache(operations) {\n    var _this6 = this;\n    operations.forEach(function (_ref) {\n      var record = _ref.record,\n        type = _ref.type;\n      if ('created' === type) {\n        record._preparedState = null;\n        _this6._cache.add(record);\n      } else if ('destroyed' === type) {\n        _this6._cache.delete(record);\n      }\n    });\n  };\n  _proto._notify = function _notify(operations) {\n    this._subscribers.forEach(function collectionChangeNotifySubscribers(_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 1),\n        subscriber = _ref3[0];\n      subscriber(operations);\n    });\n    this.changes.next(operations);\n    operations.forEach(function collectionChangeNotifyModels(_ref4) {\n      var record = _ref4.record,\n        type = _ref4.type;\n      if ('updated' === type) {\n        record._notifyChanged();\n      } else if ('destroyed' === type) {\n        record._notifyDestroyed();\n      }\n    });\n  };\n  _proto.experimentalSubscribe = function experimentalSubscribe(subscriber, debugInfo) {\n    var _this7 = this;\n    var entry = [subscriber, debugInfo];\n    this._subscribers.push(entry);\n    return function () {\n      var idx = _this7._subscribers.indexOf(entry);\n      -1 !== idx && _this7._subscribers.splice(idx, 1);\n    };\n  };\n  (0, _createClass2.default)(Collection, [{\n    key: \"db\",\n    get: function get() {\n      return this.database;\n    }\n  }, {\n    key: \"table\",\n    get: function get() {\n      return this.modelClass.table;\n    }\n  }, {\n    key: \"schema\",\n    get: function get() {\n      return this.database.schema.tables[this.table];\n    }\n  }]);\n  return Collection;\n}();\nexports.default = Collection;","map":{"version":3,"names":["_slicedToArray","require","_interopRequireDefault","exports","__esModule","default","_createClass2","_rx","_invariant","_fp","_Result","_Query","_RecordCache","Collection","database","ModelClass","_this","changes","Subject","_subscribers","modelClass","_cache","table","raw","_proto","prototype","find","id","Promise","$return","_this2","toPromise","callback","_fetchRecord","bind","findAndObserve","_this3","Observable","create","observer","unsubscribe","unsubscribed","result","value","record","next","experimentalSubscribe","isDeleted","complete","error","query","_len","arguments","length","args","Array","_key","clauses","fromArrayOrSpread","recordBuilder","undefined","noop","$error","_ensureInWriter","prepareCreate","resolve","batch","then","$boundEx","_prepareCreate","prepareCreateFromDirtyRaw","dirtyRaw","_prepareCreateFromDirtyRaw","disposableFromDirtyRaw","_disposableFromDirtyRaw","_fetchQuery","_this4","adapter","underlyingAdapter","serialize","mapValue","rawRecords","recordsFromQueryResult","_fetchIds","queryIds","_fetchCount","count","_unsafeFetchRaw","unsafeQueryRaw","_this5","Error","concat","cachedRecord","get","rawRecord","recordFromQueryResult","_applyChangesToCache","operations","_this6","forEach","_ref","type","_preparedState","add","delete","_notify","collectionChangeNotifySubscribers","_ref2","_ref3","subscriber","collectionChangeNotifyModels","_ref4","_notifyChanged","_notifyDestroyed","debugInfo","_this7","entry","push","idx","indexOf","splice","key","schema","tables"],"sources":["/app/node_modules/@nozbe/watermelondb/Collection/index.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _rx = require(\"../utils/rx\");\nvar _invariant = _interopRequireDefault(require(\"../utils/common/invariant\"));\nvar _fp = require(\"../utils/fp\");\nvar _Result = require(\"../utils/fp/Result\");\nvar _Query = _interopRequireDefault(require(\"../Query\"));\nvar _RecordCache = _interopRequireDefault(require(\"./RecordCache\"));\nvar Collection = /*#__PURE__*/function () {\n  /**\n   * `Model` subclass associated with this Collection\n   */\n\n  /**\n   * An `Rx.Subject` that emits a signal on every change (record creation/update/deletion) in\n   * this Collection.\n   *\n   * The emissions contain information about which record was changed and what the change was.\n   *\n   * Warning: You can easily introduce performance bugs in your application by using this method\n   * inappropriately. You generally should just use the `Query` API.\n   */\n\n  function Collection(database, ModelClass) {\n    var _this = this;\n    this.changes = new _rx.Subject();\n    this._subscribers = [];\n    this.database = database;\n    this.modelClass = ModelClass;\n    this._cache = new _RecordCache.default(ModelClass.table, function (raw) {\n      return new ModelClass(_this, raw);\n    }, this);\n  }\n\n  /**\n   * `Database` associated with this Collection.\n   */\n  var _proto = Collection.prototype;\n  /**\n   * Fetches the record with the given ID.\n   *\n   * If the record is not found, the Promise will reject.\n   */\n  _proto.find = function find(id) {\n    return new Promise(function ($return) {\n      var _this2 = this;\n      return $return((0, _Result.toPromise)(function (callback) {\n        return _this2._fetchRecord(id, callback);\n      }));\n    }.bind(this));\n  }\n\n  /**\n   * Fetches the given record and then starts observing it.\n   *\n   * This is a convenience method that's equivalent to\n   * `collection.find(id)`, followed by `record.observe()`.\n   */;\n  _proto.findAndObserve = function findAndObserve(id) {\n    var _this3 = this;\n    return _rx.Observable.create(function (observer) {\n      var unsubscribe = null;\n      var unsubscribed = false;\n      _this3._fetchRecord(id, function (result) {\n        if (result.value) {\n          var record = result.value;\n          observer.next(record);\n          unsubscribe = record.experimentalSubscribe(function (isDeleted) {\n            if (!unsubscribed) {\n              isDeleted ? observer.complete() : observer.next(record);\n            }\n          });\n        } else {\n          // $FlowFixMe\n          observer.error(result.error);\n        }\n      });\n      return function () {\n        unsubscribed = true;\n        unsubscribe && unsubscribe();\n      };\n    });\n  }\n\n  /*:: query: ArrayOrSpreadFn<Clause, Query<Record>>  */\n  /**\n   * Returns a `Query` with conditions given.\n   *\n   * You can pass conditions as multiple arguments or a single array.\n   *\n   * See docs for details about the Query API.\n   */\n  // $FlowFixMe\n  ;\n  _proto.query = function query(...args) {\n    var clauses = (0, _fp.fromArrayOrSpread)(args, 'Collection.query', 'Clause');\n    return new _Query.default(this, clauses);\n  }\n\n  /**\n   * Creates a new record.\n   * Pass a function to set attributes of the new record.\n   *\n   * Note: This method must be called within a Writer {@link Database#write}.\n   *\n   * @example\n   * ```js\n   * db.get(Tables.tasks).create(task => {\n   *   task.name = 'Task name'\n   * })\n   * ```\n   */;\n  _proto.create = function create(recordBuilder = _fp.noop) {\n    return new Promise(function ($return, $error) {\n      var record;\n      this.database._ensureInWriter(\"Collection.create()\");\n      record = this.prepareCreate(recordBuilder);\n      return Promise.resolve(this.database.batch(record)).then(function () {\n        try {\n          return $return(record);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }, $error);\n    }.bind(this));\n  }\n\n  /**\n   * Prepares a new record to be created\n   *\n   * Use this to batch-execute multiple changes at once.\n   * @see {Collection#create}\n   * @see {Database#batch}\n   */;\n  _proto.prepareCreate = function prepareCreate(recordBuilder = _fp.noop) {\n    // $FlowFixMe\n    return this.modelClass._prepareCreate(this, recordBuilder);\n  }\n\n  /**\n   * Prepares a new record to be created, based on a raw object.\n   *\n   * Don't use this unless you know how RawRecords work in WatermelonDB. See docs for more details.\n   *\n   * This is useful as a performance optimization, when adding online-only features to an otherwise\n   * offline-first app, or if you're implementing your own sync mechanism.\n   */;\n  _proto.prepareCreateFromDirtyRaw = function prepareCreateFromDirtyRaw(dirtyRaw) {\n    // $FlowFixMe\n    return this.modelClass._prepareCreateFromDirtyRaw(this, dirtyRaw);\n  }\n\n  /**\n   * Returns a disposable record, based on a raw object.\n   *\n   * A disposable record is a read-only record that **does not** exist in the actual database. It's\n   * not cached and cannot be saved in the database, updated, deleted, queried, or found by ID. It\n   * only exists for as long as you keep a reference to it.\n   *\n   * Don't use this unless you know how RawRecords work in WatermelonDB. See docs for more details.\n   *\n   * This is useful for adding online-only features to an otherwise offline-first app, or for\n   * temporary objects that are not meant to be persisted (as you can reuse existing Model helpers\n   * and compatible UI components to display a disposable record).\n   */;\n  _proto.disposableFromDirtyRaw = function disposableFromDirtyRaw(dirtyRaw) {\n    // $FlowFixMe\n    return this.modelClass._disposableFromDirtyRaw(this, dirtyRaw);\n  }\n\n  // *** Implementation details ***\n\n  // See: Query.fetch\n  ;\n  _proto._fetchQuery = function _fetchQuery(query, callback) {\n    var _this4 = this;\n    this.database.adapter.underlyingAdapter.query(query.serialize(), function (result) {\n      return callback((0, _Result.mapValue)(function (rawRecords) {\n        return _this4._cache.recordsFromQueryResult(rawRecords);\n      }, result));\n    });\n  };\n  _proto._fetchIds = function _fetchIds(query, callback) {\n    this.database.adapter.underlyingAdapter.queryIds(query.serialize(), callback);\n  };\n  _proto._fetchCount = function _fetchCount(query, callback) {\n    this.database.adapter.underlyingAdapter.count(query.serialize(), callback);\n  };\n  _proto._unsafeFetchRaw = function _unsafeFetchRaw(query, callback) {\n    this.database.adapter.underlyingAdapter.unsafeQueryRaw(query.serialize(), callback);\n  }\n\n  // Fetches exactly one record (See: Collection.find)\n  ;\n  _proto._fetchRecord = function _fetchRecord(id, callback) {\n    var _this5 = this;\n    if ('string' !== typeof id) {\n      callback({\n        error: new Error(\"Invalid record ID \".concat(this.table, \"#\").concat(id))\n      });\n      return;\n    }\n    var cachedRecord = this._cache.get(id);\n    if (cachedRecord) {\n      callback({\n        value: cachedRecord\n      });\n      return;\n    }\n    this.database.adapter.underlyingAdapter.find(this.table, id, function (result) {\n      return callback((0, _Result.mapValue)(function (rawRecord) {\n        (0, _invariant.default)(rawRecord, \"Record \".concat(_this5.table, \"#\").concat(id, \" not found\"));\n        return _this5._cache.recordFromQueryResult(rawRecord);\n      }, result));\n    });\n  };\n  _proto._applyChangesToCache = function _applyChangesToCache(operations) {\n    var _this6 = this;\n    operations.forEach(function ({\n      record: record,\n      type: type\n    }) {\n      if ('created' === type) {\n        record._preparedState = null;\n        _this6._cache.add(record);\n      } else if ('destroyed' === type) {\n        _this6._cache.delete(record);\n      }\n    });\n  };\n  _proto._notify = function _notify(operations) {\n    this._subscribers.forEach(function collectionChangeNotifySubscribers([subscriber]) {\n      subscriber(operations);\n    });\n    this.changes.next(operations);\n    operations.forEach(function collectionChangeNotifyModels({\n      record: record,\n      type: type\n    }) {\n      if ('updated' === type) {\n        record._notifyChanged();\n      } else if ('destroyed' === type) {\n        record._notifyDestroyed();\n      }\n    });\n  };\n  /**\n   * Notifies `subscriber` on every change (record creation/update/deletion) in this Collection.\n   *\n   * Notifications contain information about which record was changed and what the change was.\n   * (Currently, subscribers are called before `changes` emissions, but this behavior might change)\n   *\n   * Warning: You can easily introduce performance bugs in your application by using this method\n   * inappropriately. You generally should just use the `Query` API.\n   */\n  _proto.experimentalSubscribe = function experimentalSubscribe(subscriber, debugInfo) {\n    var _this7 = this;\n    var entry = [subscriber, debugInfo];\n    this._subscribers.push(entry);\n    return function () {\n      var idx = _this7._subscribers.indexOf(entry);\n      -1 !== idx && _this7._subscribers.splice(idx, 1);\n    };\n  };\n  (0, _createClass2.default)(Collection, [{\n    key: \"db\",\n    get: function get() {\n      return this.database;\n    }\n\n    /**\n     * Table name associated with this Collection\n     */\n  }, {\n    key: \"table\",\n    get: function get() {\n      // $FlowFixMe\n      return this.modelClass.table;\n    }\n\n    /**\n     * Table schema associated with this Collection\n     */\n  }, {\n    key: \"schema\",\n    get: function get() {\n      return this.database.schema.tables[this.table];\n    }\n  }]);\n  return Collection;\n}();\nexports.default = Collection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}