{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.appSchema = appSchema;\nexports.columnName = columnName;\nexports.tableName = tableName;\nexports.tableSchema = tableSchema;\nexports.validateColumnSchema = validateColumnSchema;\nvar _invariant = _interopRequireDefault(require(\"../utils/common/invariant\"));\nfunction tableName(name) {\n  return name;\n}\nfunction columnName(name) {\n  return name;\n}\nfunction appSchema(_ref) {\n  var version = _ref.version,\n    tableList = _ref.tables,\n    unsafeSql = _ref.unsafeSql;\n  if ('production' !== process.env.NODE_ENV) {\n    (0, _invariant.default)(0 < version, \"Schema version must be greater than 0\");\n  }\n  var tables = tableList.reduce(function (map, table) {\n    if ('production' !== process.env.NODE_ENV) {\n      (0, _invariant.default)('object' === typeof table && table.name, \"Table schema must contain a name\");\n    }\n    map[table.name] = table;\n    return map;\n  }, {});\n  return {\n    version: version,\n    tables: tables,\n    unsafeSql: unsafeSql\n  };\n}\nvar validateName = function validateName(name) {\n  if ('production' !== process.env.NODE_ENV) {\n    (0, _invariant.default)(!['id', '_changed', '_status', 'local_storage'].includes(name.toLowerCase()), \"Invalid column or table name '\".concat(name, \"' - reserved by WatermelonDB\"));\n    var checkName = require(\"../utils/fp/checkName\").default;\n    checkName(name);\n  }\n};\nfunction validateColumnSchema(column) {\n  if ('production' !== process.env.NODE_ENV) {\n    (0, _invariant.default)(column.name, \"Missing column name\");\n    validateName(column.name);\n    (0, _invariant.default)(['string', 'boolean', 'number'].includes(column.type), \"Invalid type \".concat(column.type, \" for column '\").concat(column.name, \"' (valid: string, boolean, number)\"));\n    if ('created_at' === column.name || 'updated_at' === column.name) {\n      (0, _invariant.default)('number' === column.type && !column.isOptional, \"\".concat(column.name, \" must be of type number and not optional\"));\n    }\n    if ('last_modified' === column.name) {\n      (0, _invariant.default)('number' === column.type, \"For compatibility reasons, column last_modified must be of type 'number', and should be optional\");\n    }\n  }\n}\nfunction tableSchema(_ref2) {\n  var name = _ref2.name,\n    columnArray = _ref2.columns,\n    unsafeSql = _ref2.unsafeSql;\n  if ('production' !== process.env.NODE_ENV) {\n    (0, _invariant.default)(name, \"Missing table name in schema\");\n    validateName(name);\n  }\n  var columns = columnArray.reduce(function (map, column) {\n    if ('production' !== process.env.NODE_ENV) {\n      validateColumnSchema(column);\n    }\n    map[column.name] = column;\n    return map;\n  }, {});\n  return {\n    name: name,\n    columns: columns,\n    columnArray: columnArray,\n    unsafeSql: unsafeSql\n  };\n}","map":{"version":3,"names":["_interopRequireDefault","require","exports","__esModule","appSchema","columnName","tableName","tableSchema","validateColumnSchema","_invariant","name","_ref","version","tableList","tables","unsafeSql","process","env","NODE_ENV","default","reduce","map","table","validateName","includes","toLowerCase","concat","checkName","column","type","isOptional","_ref2","columnArray","columns"],"sources":["/app/node_modules/@nozbe/watermelondb/Schema/index.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.appSchema = appSchema;\nexports.columnName = columnName;\nexports.tableName = tableName;\nexports.tableSchema = tableSchema;\nexports.validateColumnSchema = validateColumnSchema;\nvar _invariant = _interopRequireDefault(require(\"../utils/common/invariant\"));\n// NOTE: Only require files needed (critical path on web)\n/**\n * Creates a typed TableName\n */\nfunction tableName(name) {\n  return name;\n}\n\n/**\n * Creates a typed ColumnName\n */\nfunction columnName(name) {\n  return name;\n}\n\n/**\n * Creates a database schema object. Pass table definitions created using {@see tableSchema}\n */\nfunction appSchema({\n  version: version,\n  tables: tableList,\n  unsafeSql: unsafeSql\n}) {\n  if ('production' !== process.env.NODE_ENV) {\n    (0, _invariant.default)(0 < version, \"Schema version must be greater than 0\");\n  }\n  var tables = tableList.reduce(function (map, table) {\n    if ('production' !== process.env.NODE_ENV) {\n      (0, _invariant.default)('object' === typeof table && table.name, \"Table schema must contain a name\");\n    }\n    map[table.name] = table;\n    return map;\n  }, {});\n  return {\n    version: version,\n    tables: tables,\n    unsafeSql: unsafeSql\n  };\n}\nvar validateName = function (name) {\n  if ('production' !== process.env.NODE_ENV) {\n    (0, _invariant.default)(!['id', '_changed', '_status', 'local_storage'].includes(name.toLowerCase()), \"Invalid column or table name '\".concat(name, \"' - reserved by WatermelonDB\"));\n    var checkName = require('../utils/fp/checkName').default;\n    checkName(name);\n  }\n};\nfunction validateColumnSchema(column) {\n  if ('production' !== process.env.NODE_ENV) {\n    (0, _invariant.default)(column.name, \"Missing column name\");\n    validateName(column.name);\n    (0, _invariant.default)(['string', 'boolean', 'number'].includes(column.type), \"Invalid type \".concat(column.type, \" for column '\").concat(column.name, \"' (valid: string, boolean, number)\"));\n    if ('created_at' === column.name || 'updated_at' === column.name) {\n      (0, _invariant.default)('number' === column.type && !column.isOptional, \"\".concat(column.name, \" must be of type number and not optional\"));\n    }\n    if ('last_modified' === column.name) {\n      (0, _invariant.default)('number' === column.type, \"For compatibility reasons, column last_modified must be of type 'number', and should be optional\");\n    }\n  }\n}\n\n/**\n * Creates a typed TableSchema\n */\nfunction tableSchema({\n  name: name,\n  columns: columnArray,\n  unsafeSql: unsafeSql\n}) {\n  if ('production' !== process.env.NODE_ENV) {\n    (0, _invariant.default)(name, \"Missing table name in schema\");\n    validateName(name);\n  }\n  var columns = columnArray.reduce(function (map, column) {\n    if ('production' !== process.env.NODE_ENV) {\n      validateColumnSchema(column);\n    }\n    map[column.name] = column;\n    return map;\n  }, {});\n  return {\n    name: name,\n    columns: columns,\n    columnArray: columnArray,\n    unsafeSql: unsafeSql\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}