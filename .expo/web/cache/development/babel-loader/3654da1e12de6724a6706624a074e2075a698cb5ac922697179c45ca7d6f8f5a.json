{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.deleteDatabase = deleteDatabase;\nexports.lokiFatalError = lokiFatalError;\nexports.newLoki = newLoki;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _logger = _interopRequireDefault(require(\"../../../utils/common/logger\"));\nvar isIDBAvailable = function isIDBAvailable(onQuotaExceededError) {\n  return new Promise(function (resolve) {\n    if ('undefined' === typeof indexedDB) {\n      resolve(false);\n    }\n    var checkRequest = indexedDB.open('WatermelonIDBChecker');\n    checkRequest.onsuccess = function (e) {\n      var db = e.target.result;\n      db.close();\n      resolve(true);\n    };\n    checkRequest.onerror = function (event) {\n      var _event$target;\n      var error = null === event || void 0 === event ? void 0 : null === (_event$target = event.target) || void 0 === _event$target ? void 0 : _event$target.error;\n      _logger.default.error('[Loki] IndexedDB checker failed to open. Most likely, user is in Private Mode. It could also be a quota exceeded error. Will fall back to in-memory database.', event, error);\n      if (error && 'QuotaExceededError' === error.name) {\n        _logger.default.log('[Loki] Looks like disk quota was exceeded: ', error);\n        onQuotaExceededError && onQuotaExceededError(error);\n      }\n      resolve(false);\n    };\n    checkRequest.onblocked = function () {\n      _logger.default.error('IndexedDB checker call is blocked');\n    };\n  });\n};\nfunction getLokiAdapter(options) {\n  return new Promise(function ($return, $error) {\n    var useIncrementalIndexedDB, adapter, onQuotaExceededError, dbName, extraIncrementalIDBOptions, IncrementalIDBAdapter, LokiIndexedAdapter, LokiMemoryAdapter;\n    useIncrementalIndexedDB = options.useIncrementalIndexedDB;\n    adapter = options._testLokiAdapter;\n    onQuotaExceededError = options.onQuotaExceededError;\n    dbName = options.dbName;\n    var _options$extraIncreme = options.extraIncrementalIDBOptions;\n    extraIncrementalIDBOptions = _options$extraIncreme === void 0 ? {} : _options$extraIncreme;\n    if (adapter) {\n      return $return(adapter);\n    } else {\n      return Promise.resolve(isIDBAvailable(onQuotaExceededError)).then(function ($await_3) {\n        try {\n          if ($await_3) {\n            if (useIncrementalIndexedDB) {\n              IncrementalIDBAdapter = options._betaLoki ? require('lokijs/src/incremental-indexeddb-adapter') : require('lokijs/src/incremental-indexeddb-adapter');\n              return $return(new IncrementalIDBAdapter(extraIncrementalIDBOptions));\n            }\n            LokiIndexedAdapter = require('lokijs/src/loki-indexed-adapter');\n            return $return(new LokiIndexedAdapter(dbName));\n          }\n          return $If_2.call(this);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this), $error);\n    }\n    function $If_2() {\n      var _ref = options._betaLoki ? require('lokijs') : require('lokijs');\n      LokiMemoryAdapter = _ref.LokiMemoryAdapter;\n      return $return(new LokiMemoryAdapter());\n    }\n    return $If_2.call(this);\n  });\n}\nfunction newLoki(options) {\n  return new Promise(function ($return, $error) {\n    var extraLokiOptions, LokiDb, loki;\n    var _options$extraLokiOpt = options.extraLokiOptions;\n    extraLokiOptions = _options$extraLokiOpt === void 0 ? {} : _options$extraLokiOpt;\n    LokiDb = options._betaLoki ? require('lokijs') : require('lokijs');\n    return Promise.resolve(getLokiAdapter(options)).then(function ($await_4) {\n      try {\n        loki = new LokiDb(options.dbName, (0, _extends2.default)({\n          adapter: $await_4,\n          autosave: true,\n          autosaveInterval: 500,\n          verbose: true\n        }, extraLokiOptions));\n        return Promise.resolve(new Promise(function (resolve, reject) {\n          loki.loadDatabase({}, function (error) {\n            error ? reject(error) : resolve();\n          });\n        })).then(function ($await_5) {\n          try {\n            return $return(loki);\n          } catch ($boundEx) {\n            return $error($boundEx);\n          }\n        }, $error);\n      } catch ($boundEx) {\n        return $error($boundEx);\n      }\n    }, $error);\n  });\n}\nfunction deleteDatabase(loki) {\n  return new Promise(function ($return, $error) {\n    return Promise.resolve(new Promise(function (resolve, reject) {\n      loki.close(function () {\n        loki.deleteDatabase({}, function (response) {\n          if (response && response.success || response === undefined) {\n            resolve();\n          } else {\n            reject(response);\n          }\n        });\n      });\n    })).then(function ($await_6) {\n      try {\n        return $return();\n      } catch ($boundEx) {\n        return $error($boundEx);\n      }\n    }, $error);\n  });\n}\nfunction lokiFatalError(loki) {\n  try {\n    var fatalHandler = function fatalHandler() {\n      throw new Error('Illegal attempt to save Loki database after a fatal error');\n    };\n    loki.save = fatalHandler;\n    loki.saveDatabase = fatalHandler;\n    loki.saveDatabaseInternal = fatalHandler;\n    loki.autosave = false;\n    loki.autosaveDisable();\n    loki.close();\n  } catch (error) {\n    _logger.default.error('Failed to perform loki fatal error');\n    _logger.default.error(error);\n  }\n}","map":{"version":3,"names":["_interopRequireDefault","require","exports","__esModule","deleteDatabase","lokiFatalError","newLoki","_extends2","_logger","isIDBAvailable","onQuotaExceededError","Promise","resolve","indexedDB","checkRequest","open","onsuccess","e","db","target","result","close","onerror","event","_event$target","error","default","name","log","onblocked","getLokiAdapter","options","$return","$error","useIncrementalIndexedDB","adapter","dbName","extraIncrementalIDBOptions","IncrementalIDBAdapter","LokiIndexedAdapter","LokiMemoryAdapter","_testLokiAdapter","_options$extraIncreme","then","$await_3","_betaLoki","$If_2","call","$boundEx","bind","_ref","extraLokiOptions","LokiDb","loki","_options$extraLokiOpt","$await_4","autosave","autosaveInterval","verbose","reject","loadDatabase","$await_5","response","success","undefined","$await_6","fatalHandler","Error","save","saveDatabase","saveDatabaseInternal","autosaveDisable"],"sources":["/app/node_modules/@nozbe/watermelondb/adapters/lokijs/worker/lokiExtensions.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.deleteDatabase = deleteDatabase;\nexports.lokiFatalError = lokiFatalError;\nexports.newLoki = newLoki;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _logger = _interopRequireDefault(require(\"../../../utils/common/logger\"));\n/* eslint-disable no-undef */\n// don't import the whole utils/ here!\nvar isIDBAvailable = function (onQuotaExceededError) {\n  return new Promise(function (resolve) {\n    // $FlowFixMe\n    if ('undefined' === typeof indexedDB) {\n      resolve(false);\n    }\n\n    // in Firefox private mode, IDB will be available, but will fail to open\n    // $FlowFixMe\n    var checkRequest = indexedDB.open('WatermelonIDBChecker');\n    checkRequest.onsuccess = function (e) {\n      var db = e.target.result;\n      db.close();\n      resolve(true);\n    };\n    checkRequest.onerror = function (event) {\n      var _event$target;\n      var error = null === event || void 0 === event ? void 0 : null === (_event$target = event.target) || void 0 === _event$target ? void 0 : _event$target.error;\n      // this is what Firefox in Private Mode returns:\n      // DOMException: \"A mutation operation was attempted on a database that did not allow mutations.\"\n      // code: 11, name: InvalidStateError\n      _logger.default.error('[Loki] IndexedDB checker failed to open. Most likely, user is in Private Mode. It could also be a quota exceeded error. Will fall back to in-memory database.', event, error);\n      if (error && 'QuotaExceededError' === error.name) {\n        _logger.default.log('[Loki] Looks like disk quota was exceeded: ', error);\n        onQuotaExceededError && onQuotaExceededError(error);\n      }\n      resolve(false);\n    };\n    checkRequest.onblocked = function () {\n      _logger.default.error('IndexedDB checker call is blocked');\n    };\n  });\n};\nfunction getLokiAdapter(options) {\n  return new Promise(function ($return, $error) {\n    var useIncrementalIndexedDB, adapter, onQuotaExceededError, dbName, extraIncrementalIDBOptions, IncrementalIDBAdapter, LokiIndexedAdapter, LokiMemoryAdapter;\n    ({\n      useIncrementalIndexedDB: useIncrementalIndexedDB,\n      _testLokiAdapter: adapter,\n      onQuotaExceededError: onQuotaExceededError,\n      dbName: dbName,\n      extraIncrementalIDBOptions = {}\n    } = options);\n    if (adapter) {\n      return $return(adapter);\n    } else {\n      return Promise.resolve(isIDBAvailable(onQuotaExceededError)).then(function ($await_3) {\n        try {\n          if ($await_3) {\n            if (useIncrementalIndexedDB) {\n              IncrementalIDBAdapter = options._betaLoki ? require('lokijs/src/incremental-indexeddb-adapter') : require('lokijs/src/incremental-indexeddb-adapter');\n              // $FlowFixMe\n              return $return(new IncrementalIDBAdapter(extraIncrementalIDBOptions));\n            }\n            LokiIndexedAdapter = require('lokijs/src/loki-indexed-adapter');\n            return $return(new LokiIndexedAdapter(dbName));\n          }\n          return $If_2.call(this);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this), $error);\n    }\n\n    // if IDB is unavailable (that happens in private mode), fall back to memory adapter\n    // we could also fall back to localstorage adapter, but it will fail in all but the smallest dbs\n    function $If_2() {\n      ({\n        LokiMemoryAdapter: LokiMemoryAdapter\n      } = options._betaLoki ? require('lokijs') : require('lokijs'));\n      return $return(new LokiMemoryAdapter());\n    }\n    return $If_2.call(this);\n  });\n}\nfunction newLoki(options) {\n  return new Promise(function ($return, $error) {\n    var extraLokiOptions, LokiDb, loki;\n    ({\n      extraLokiOptions = {}\n    } = options);\n    LokiDb = options._betaLoki ? require('lokijs') : require('lokijs');\n    return Promise.resolve(getLokiAdapter(options)).then(function ($await_4) {\n      try {\n        loki = new LokiDb(options.dbName, (0, _extends2.default)({\n          adapter: $await_4,\n          autosave: true,\n          autosaveInterval: 500,\n          verbose: true\n        }, extraLokiOptions));\n        return Promise.resolve(new Promise(function (resolve, reject) {\n          loki.loadDatabase({}, function (error) {\n            error ? reject(error) : resolve();\n          });\n        })).then(function ($await_5) {\n          try {\n            return $return(loki);\n          } catch ($boundEx) {\n            return $error($boundEx);\n          }\n        }, $error);\n      } catch ($boundEx) {\n        return $error($boundEx);\n      }\n    }, $error);\n  });\n}\nfunction deleteDatabase(loki) {\n  return new Promise(function ($return, $error) {\n    return Promise.resolve(new Promise(function (resolve, reject) {\n      // Works around a race condition - Loki doesn't disable autosave or drain save queue before\n      // deleting database, so it's possible to delete and then have the database be saved\n      loki.close(function () {\n        loki.deleteDatabase({}, function (response) {\n          // LokiIndexedAdapter responds with `{ success: true }`, while\n          // LokiMemory adapter just calls it with no params\n          if (response && response.success || response === undefined) {\n            resolve();\n          } else {\n            reject(response);\n          }\n        });\n      });\n    })).then(function ($await_6) {\n      try {\n        return $return();\n      } catch ($boundEx) {\n        return $error($boundEx);\n      }\n    }, $error);\n  });\n}\n\n// In case of a fatal error, break Loki so that it cannot save its contents to disk anymore\n// This might result in a loss of data in recent changes, but we assume that whatever caused the\n// fatal error has corrupted the database, so we want to prevent it from being persisted\n// There's no recovery from this, app must be restarted with a fresh LokiJSAdapter.\nfunction lokiFatalError(loki) {\n  try {\n    // below is some very ugly defensive coding, but we're fatal and don't trust anyone anymore\n    var fatalHandler = function fatalHandler() {\n      throw new Error('Illegal attempt to save Loki database after a fatal error');\n    };\n    loki.save = fatalHandler;\n    loki.saveDatabase = fatalHandler;\n    loki.saveDatabaseInternal = fatalHandler;\n    // disable autosave\n    loki.autosave = false;\n    loki.autosaveDisable();\n    // close db\n    loki.close();\n  } catch (error) {\n    _logger.default.error('Failed to perform loki fatal error');\n    _logger.default.error(error);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}