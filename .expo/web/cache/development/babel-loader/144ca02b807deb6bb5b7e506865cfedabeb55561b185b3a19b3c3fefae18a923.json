{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.associations = associations;\nexports.default = void 0;\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _rx = require(\"../utils/rx\");\nvar _invariant = _interopRequireDefault(require(\"../utils/common/invariant\"));\nvar _ensureSync = _interopRequireDefault(require(\"../utils/common/ensureSync\"));\nvar _fromPairs = _interopRequireDefault(require(\"../utils/fp/fromPairs\"));\nvar _noop = _interopRequireDefault(require(\"../utils/fp/noop\"));\nvar _Schema = require(\"../Schema\");\nvar _RawRecord = require(\"../RawRecord\");\nvar _helpers = require(\"../sync/helpers\");\nvar _helpers2 = require(\"./helpers\");\nfunction associations() {\n  for (var _len = arguments.length, associationList = new Array(_len), _key = 0; _key < _len; _key++) {\n    associationList[_key] = arguments[_key];\n  }\n  return (0, _fromPairs.default)(associationList);\n}\nvar Model = function () {\n  var _proto = Model.prototype;\n  _proto._getChanges = function _getChanges() {\n    if (!this.__changes) {\n      this.__changes = new _rx.BehaviorSubject(this);\n    }\n    return this.__changes;\n  };\n  _proto.update = function update() {\n    var recordUpdater = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _noop.default;\n    return new Promise(function ($return, $error) {\n      var record;\n      this.db._ensureInWriter(\"Model.update()\");\n      record = this.prepareUpdate(recordUpdater);\n      return Promise.resolve(this.db.batch(this)).then(function () {\n        try {\n          return $return(record);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }, $error);\n    }.bind(this));\n  };\n  _proto.prepareUpdate = function prepareUpdate() {\n    var recordUpdater = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _noop.default;\n    var _this = this;\n    (0, _invariant.default)(!this._preparedState, \"Cannot update a record with pending changes. Update attempted for table \".concat(this.table, \" and record \").concat(this.id, \".\"));\n    this.__ensureNotDisposable(\"Model.prepareUpdate()\");\n    this._isEditing = true;\n    if ('updatedAt' in this) {\n      this._setRaw((0, _Schema.columnName)('updated_at'), Date.now());\n    }\n    (0, _ensureSync.default)(recordUpdater(this));\n    this._isEditing = false;\n    this._preparedState = 'update';\n    if ('production' !== process.env.NODE_ENV && 'undefined' !== typeof process && process && process.nextTick) {\n      process.nextTick(function () {\n        (0, _invariant.default)('update' !== _this._preparedState, \"record.prepareUpdate was called on \".concat(_this.table, \"#\").concat(_this.id, \" but wasn't sent to batch() synchronously -- this is bad!\"));\n      });\n    }\n    return this;\n  };\n  _proto.markAsDeleted = function markAsDeleted() {\n    return new Promise(function ($return, $error) {\n      this.db._ensureInWriter(\"Model.markAsDeleted()\");\n      this.__ensureNotDisposable(\"Model.markAsDeleted()\");\n      return Promise.resolve(this.db.batch(this.prepareMarkAsDeleted())).then(function () {\n        try {\n          return $return();\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }, $error);\n    }.bind(this));\n  };\n  _proto.prepareMarkAsDeleted = function prepareMarkAsDeleted() {\n    (0, _invariant.default)(!this._preparedState, \"Cannot mark a record with pending changes as deleted\");\n    this.__ensureNotDisposable(\"Model.prepareMarkAsDeleted()\");\n    this._raw._status = 'deleted';\n    this._preparedState = 'markAsDeleted';\n    return this;\n  };\n  _proto.destroyPermanently = function destroyPermanently() {\n    return new Promise(function ($return, $error) {\n      this.db._ensureInWriter(\"Model.destroyPermanently()\");\n      this.__ensureNotDisposable(\"Model.destroyPermanently()\");\n      return Promise.resolve(this.db.batch(this.prepareDestroyPermanently())).then(function () {\n        try {\n          return $return();\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }, $error);\n    }.bind(this));\n  };\n  _proto.prepareDestroyPermanently = function prepareDestroyPermanently() {\n    (0, _invariant.default)(!this._preparedState, \"Cannot destroy permanently a record with pending changes\");\n    this.__ensureNotDisposable(\"Model.prepareDestroyPermanently()\");\n    this._raw._status = 'deleted';\n    this._preparedState = 'destroyPermanently';\n    return this;\n  };\n  _proto.experimentalMarkAsDeleted = function experimentalMarkAsDeleted() {\n    return new Promise(function ($return, $error) {\n      var records;\n      this.db._ensureInWriter(\"Model.experimental_markAsDeleted()\");\n      this.__ensureNotDisposable(\"Model.experimentalMarkAsDeleted()\");\n      return Promise.resolve((0, _helpers2.fetchDescendants)(this)).then(function ($await_4) {\n        try {\n          records = $await_4;\n          records.forEach(function (model) {\n            return model.prepareMarkAsDeleted();\n          });\n          records.push(this.prepareMarkAsDeleted());\n          return Promise.resolve(this.db.batch(records)).then(function () {\n            try {\n              return $return();\n            } catch ($boundEx) {\n              return $error($boundEx);\n            }\n          }, $error);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this), $error);\n    }.bind(this));\n  };\n  _proto.experimentalDestroyPermanently = function experimentalDestroyPermanently() {\n    return new Promise(function ($return, $error) {\n      var records;\n      this.db._ensureInWriter(\"Model.experimental_destroyPermanently()\");\n      this.__ensureNotDisposable(\"Model.experimentalDestroyPermanently()\");\n      return Promise.resolve((0, _helpers2.fetchDescendants)(this)).then(function ($await_6) {\n        try {\n          records = $await_6;\n          records.forEach(function (model) {\n            return model.prepareDestroyPermanently();\n          });\n          records.push(this.prepareDestroyPermanently());\n          return Promise.resolve(this.db.batch(records)).then(function () {\n            try {\n              return $return();\n            } catch ($boundEx) {\n              return $error($boundEx);\n            }\n          }, $error);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this), $error);\n    }.bind(this));\n  };\n  _proto.observe = function observe() {\n    (0, _invariant.default)('create' !== this._preparedState, \"Cannot observe uncommitted record\");\n    return this._getChanges();\n  };\n  _proto.batch = function batch() {\n    for (var _len2 = arguments.length, records = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      records[_key2] = arguments[_key2];\n    }\n    return this.db.batch(records);\n  };\n  _proto.callWriter = function callWriter(action) {\n    return this.db._workQueue.subAction(action);\n  };\n  _proto.callReader = function callReader(action) {\n    return this.db._workQueue.subAction(action);\n  };\n  function Model(collection, raw) {\n    this._isEditing = false;\n    this._preparedState = null;\n    this.__changes = null;\n    this._subscribers = [];\n    this.collection = collection;\n    this._raw = raw;\n  }\n  Model._prepareCreate = function _prepareCreate(collection, recordBuilder) {\n    var record = new this(collection, (0, _RawRecord.sanitizedRaw)((0, _helpers2.createTimestampsFor)(this.prototype), collection.schema));\n    record._preparedState = 'create';\n    record._isEditing = true;\n    (0, _ensureSync.default)(recordBuilder(record));\n    record._isEditing = false;\n    return record;\n  };\n  Model._prepareCreateFromDirtyRaw = function _prepareCreateFromDirtyRaw(collection, dirtyRaw) {\n    var record = new this(collection, (0, _RawRecord.sanitizedRaw)(dirtyRaw, collection.schema));\n    record._preparedState = 'create';\n    return record;\n  };\n  Model._disposableFromDirtyRaw = function _disposableFromDirtyRaw(collection, dirtyRaw) {\n    var record = new this(collection, (0, _RawRecord.sanitizedRaw)(dirtyRaw, collection.schema));\n    record._raw._status = 'disposable';\n    return record;\n  };\n  _proto.experimentalSubscribe = function experimentalSubscribe(subscriber, debugInfo) {\n    var _this2 = this;\n    var entry = [subscriber, debugInfo];\n    this._subscribers.push(entry);\n    return function () {\n      var idx = _this2._subscribers.indexOf(entry);\n      -1 !== idx && _this2._subscribers.splice(idx, 1);\n    };\n  };\n  _proto._notifyChanged = function _notifyChanged() {\n    this._getChanges().next(this);\n    this._subscribers.forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n        subscriber = _ref2[0];\n      subscriber(false);\n    });\n  };\n  _proto._notifyDestroyed = function _notifyDestroyed() {\n    this._getChanges().complete();\n    this._subscribers.forEach(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n        subscriber = _ref4[0];\n      subscriber(true);\n    });\n  };\n  _proto._getRaw = function _getRaw(rawFieldName) {\n    return this._raw[rawFieldName];\n  };\n  _proto._setRaw = function _setRaw(rawFieldName, rawValue) {\n    this.__ensureCanSetRaw();\n    var valueBefore = this._raw[rawFieldName];\n    (0, _RawRecord.setRawSanitized)(this._raw, rawFieldName, rawValue, this.collection.schema.columns[rawFieldName]);\n    if (valueBefore !== this._raw[rawFieldName] && 'create' !== this._preparedState) {\n      (0, _helpers.setRawColumnChange)(this._raw, rawFieldName);\n    }\n  };\n  _proto._dangerouslySetRawWithoutMarkingColumnChange = function _dangerouslySetRawWithoutMarkingColumnChange(rawFieldName, rawValue) {\n    this.__ensureCanSetRaw();\n    (0, _RawRecord.setRawSanitized)(this._raw, rawFieldName, rawValue, this.collection.schema.columns[rawFieldName]);\n  };\n  _proto.__ensureCanSetRaw = function __ensureCanSetRaw() {\n    this.__ensureNotDisposable(\"Model._setRaw()\");\n    (0, _invariant.default)(this._isEditing, 'Not allowed to change record outside of create/update()');\n    (0, _invariant.default)(!this._getChanges().isStopped && 'deleted' !== this._raw._status, 'Not allowed to change deleted records');\n  };\n  _proto.__ensureNotDisposable = function __ensureNotDisposable(debugName) {\n    (0, _invariant.default)('disposable' !== this._raw._status, \"\".concat(debugName, \" cannot be called on a disposable record\"));\n  };\n  (0, _createClass2.default)(Model, [{\n    key: \"id\",\n    get: function get() {\n      return this._raw.id;\n    }\n  }, {\n    key: \"syncStatus\",\n    get: function get() {\n      return this._raw._status;\n    }\n  }, {\n    key: \"collections\",\n    get: function get() {\n      return this.database.collections;\n    }\n  }, {\n    key: \"database\",\n    get: function get() {\n      return this.collection.database;\n    }\n  }, {\n    key: \"db\",\n    get: function get() {\n      return this.collection.database;\n    }\n  }, {\n    key: \"asModel\",\n    get: function get() {\n      return this;\n    }\n  }, {\n    key: \"table\",\n    get: function get() {\n      return this.constructor.table;\n    }\n  }]);\n  return Model;\n}();\nexports.default = Model;\nModel.associations = {};\nModel._wmelonTag = 'model';","map":{"version":3,"names":["_slicedToArray","require","_interopRequireDefault","exports","__esModule","associations","default","_createClass2","_rx","_invariant","_ensureSync","_fromPairs","_noop","_Schema","_RawRecord","_helpers","_helpers2","_len","arguments","length","associationList","Array","_key","Model","_proto","prototype","_getChanges","__changes","BehaviorSubject","update","recordUpdater","undefined","Promise","$return","$error","record","db","_ensureInWriter","prepareUpdate","resolve","batch","then","$boundEx","bind","_this","_preparedState","concat","table","id","__ensureNotDisposable","_isEditing","_setRaw","columnName","Date","now","process","env","NODE_ENV","nextTick","markAsDeleted","prepareMarkAsDeleted","_raw","_status","destroyPermanently","prepareDestroyPermanently","experimentalMarkAsDeleted","records","fetchDescendants","$await_4","forEach","model","push","experimentalDestroyPermanently","$await_6","observe","_len2","_key2","callWriter","action","_workQueue","subAction","callReader","collection","raw","_subscribers","_prepareCreate","recordBuilder","sanitizedRaw","createTimestampsFor","schema","_prepareCreateFromDirtyRaw","dirtyRaw","_disposableFromDirtyRaw","experimentalSubscribe","subscriber","debugInfo","_this2","entry","idx","indexOf","splice","_notifyChanged","next","_ref","_ref2","_notifyDestroyed","complete","_ref3","_ref4","_getRaw","rawFieldName","rawValue","__ensureCanSetRaw","valueBefore","setRawSanitized","columns","setRawColumnChange","_dangerouslySetRawWithoutMarkingColumnChange","isStopped","debugName","key","get","database","collections","constructor","_wmelonTag"],"sources":["/app/node_modules/@nozbe/watermelondb/Model/index.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.associations = associations;\nexports.default = void 0;\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _rx = require(\"../utils/rx\");\nvar _invariant = _interopRequireDefault(require(\"../utils/common/invariant\"));\nvar _ensureSync = _interopRequireDefault(require(\"../utils/common/ensureSync\"));\nvar _fromPairs = _interopRequireDefault(require(\"../utils/fp/fromPairs\"));\nvar _noop = _interopRequireDefault(require(\"../utils/fp/noop\"));\nvar _Schema = require(\"../Schema\");\nvar _RawRecord = require(\"../RawRecord\");\nvar _helpers = require(\"../sync/helpers\");\nvar _helpers2 = require(\"./helpers\");\n// TODO: Refactor associations API and ideally get rid of this in favor of plain arrays/objects\nfunction associations(...associationList) {\n  return (0, _fromPairs.default)(associationList);\n}\nvar Model = /*#__PURE__*/function () {\n  var _proto = Model.prototype;\n  /**\n   * This must be set in Model subclasses to the name of associated database table\n   */\n  /**\n   * This can be set in Model subclasses to define (parent/child) relationships between different\n   * Models.\n   *\n   * See docs for more details.\n   */\n  // Used by withObservables to differentiate between object types\n  _proto._getChanges = function _getChanges() {\n    if (!this.__changes) {\n      // initializing lazily - it has non-trivial perf impact on very large collections\n      this.__changes = new _rx.BehaviorSubject(this);\n    }\n    return this.__changes;\n  }\n\n  /**\n   * Record's ID\n   */;\n  /**\n   * Modifies the record.\n   * Pass a function to set attributes of the new record.\n   *\n   * Updates `updateAt` field (if available)\n   *\n   * Note: This method must be called within a Writer {@link Database#write}.\n   *\n   * * @example\n   * ```js\n   * someTask.create(task => {\n   *   task.name = 'New name'\n   * })\n   */\n  _proto.update = function update(recordUpdater = _noop.default) {\n    return new Promise(function ($return, $error) {\n      var record;\n      this.db._ensureInWriter(\"Model.update()\");\n      record = this.prepareUpdate(recordUpdater);\n      return Promise.resolve(this.db.batch(this)).then(function () {\n        try {\n          return $return(record);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }, $error);\n    }.bind(this));\n  }\n\n  /**\n   * Prepares record to be updated\n   *\n   * Use this to batch-execute multiple changes at once.\n   * Note: Prepared changes must be executed by **synchronously** passing them to `database.batch()`\n   * @see {Model#update}\n   * @see {Database#batch}\n   */;\n  _proto.prepareUpdate = function prepareUpdate(recordUpdater = _noop.default) {\n    var _this = this;\n    (0, _invariant.default)(!this._preparedState, \"Cannot update a record with pending changes. Update attempted for table \".concat(this.table, \" and record \").concat(this.id, \".\"));\n    this.__ensureNotDisposable(\"Model.prepareUpdate()\");\n    this._isEditing = true;\n\n    // Touch updatedAt (if available)\n    if ('updatedAt' in this) {\n      this._setRaw((0, _Schema.columnName)('updated_at'), Date.now());\n    }\n\n    // Perform updates\n    (0, _ensureSync.default)(recordUpdater(this));\n    this._isEditing = false;\n    this._preparedState = 'update';\n\n    // TODO: `process.nextTick` doesn't work on React Native\n    // We could polyfill with setImmediate, but it doesn't have the same effect — test and enseure\n    // it would actually work for this purpose\n    // TODO: Also add to other prepared changes\n    if ('production' !== process.env.NODE_ENV && 'undefined' !== typeof process && process && process.nextTick) {\n      process.nextTick(function () {\n        (0, _invariant.default)('update' !== _this._preparedState, \"record.prepareUpdate was called on \".concat(_this.table, \"#\").concat(_this.id, \" but wasn't sent to batch() synchronously -- this is bad!\"));\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Marks this record as deleted (it will be deleted permanently after sync)\n   *\n   * Note: This method must be called within a Writer {@link Database#write}.\n   */;\n  _proto.markAsDeleted = function markAsDeleted() {\n    return new Promise(function ($return, $error) {\n      this.db._ensureInWriter(\"Model.markAsDeleted()\");\n      this.__ensureNotDisposable(\"Model.markAsDeleted()\");\n      return Promise.resolve(this.db.batch(this.prepareMarkAsDeleted())).then(function () {\n        try {\n          return $return();\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }, $error);\n    }.bind(this));\n  }\n\n  /**\n   * Prepares record to be marked as deleted\n   *\n   * Use this to batch-execute multiple changes at once.\n   * Note: Prepared changes must be executed by **synchronously** passing them to `database.batch()`\n   * @see {Model#markAsDeleted}\n   * @see {Database#batch}\n   */;\n  _proto.prepareMarkAsDeleted = function prepareMarkAsDeleted() {\n    (0, _invariant.default)(!this._preparedState, \"Cannot mark a record with pending changes as deleted\");\n    this.__ensureNotDisposable(\"Model.prepareMarkAsDeleted()\");\n    this._raw._status = 'deleted';\n    this._preparedState = 'markAsDeleted';\n    return this;\n  }\n\n  /**\n   * Permanently deletes this record from the database\n   *\n   * Note: Do not use this when using Sync, as deletion will not be synced.\n   *\n   * Note: This method must be called within a Writer {@link Database#write}.\n   */;\n  _proto.destroyPermanently = function destroyPermanently() {\n    return new Promise(function ($return, $error) {\n      this.db._ensureInWriter(\"Model.destroyPermanently()\");\n      this.__ensureNotDisposable(\"Model.destroyPermanently()\");\n      return Promise.resolve(this.db.batch(this.prepareDestroyPermanently())).then(function () {\n        try {\n          return $return();\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }, $error);\n    }.bind(this));\n  }\n\n  /**\n   * Prepares record to be permanently destroyed\n   *\n   * Note: Do not use this when using Sync, as deletion will not be synced.\n   *\n   * Use this to batch-execute multiple changes at once.\n   * Note: Prepared changes must be executed by **synchronously** passing them to `database.batch()`\n   * @see {Model#destroyPermanently}\n   * @see {Database#batch}\n   */;\n  _proto.prepareDestroyPermanently = function prepareDestroyPermanently() {\n    (0, _invariant.default)(!this._preparedState, \"Cannot destroy permanently a record with pending changes\");\n    this.__ensureNotDisposable(\"Model.prepareDestroyPermanently()\");\n    this._raw._status = 'deleted';\n    this._preparedState = 'destroyPermanently';\n    return this;\n  }\n\n  /**\n   * Marks this records and its descendants as deleted (they will be deleted permenently after sync)\n   *\n   * Descendants are determined by taking Model's `has_many` (children) associations, and then their\n   * children associations recursively.\n   *\n   * Note: This method must be called within a Writer {@link Database#write}.\n   */;\n  _proto.experimentalMarkAsDeleted = function experimentalMarkAsDeleted() {\n    return new Promise(function ($return, $error) {\n      var records;\n      this.db._ensureInWriter(\"Model.experimental_markAsDeleted()\");\n      this.__ensureNotDisposable(\"Model.experimentalMarkAsDeleted()\");\n      return Promise.resolve((0, _helpers2.fetchDescendants)(this)).then(function ($await_4) {\n        try {\n          records = $await_4;\n          records.forEach(function (model) {\n            return model.prepareMarkAsDeleted();\n          });\n          records.push(this.prepareMarkAsDeleted());\n          return Promise.resolve(this.db.batch(records)).then(function () {\n            try {\n              return $return();\n            } catch ($boundEx) {\n              return $error($boundEx);\n            }\n          }, $error);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this), $error);\n    }.bind(this));\n  }\n\n  /**\n   * Permanently deletes this record and its descendants from the database\n   *\n   * Descendants are determined by taking Model's `has_many` (children) associations, and then their\n   * children associations recursively.\n   *\n   * Note: Do not use this when using Sync, as deletion will not be synced.\n   *\n   * Note: This method must be called within a Writer {@link Database#write}.\n   */;\n  _proto.experimentalDestroyPermanently = function experimentalDestroyPermanently() {\n    return new Promise(function ($return, $error) {\n      var records;\n      this.db._ensureInWriter(\"Model.experimental_destroyPermanently()\");\n      this.__ensureNotDisposable(\"Model.experimentalDestroyPermanently()\");\n      return Promise.resolve((0, _helpers2.fetchDescendants)(this)).then(function ($await_6) {\n        try {\n          records = $await_6;\n          records.forEach(function (model) {\n            return model.prepareDestroyPermanently();\n          });\n          records.push(this.prepareDestroyPermanently());\n          return Promise.resolve(this.db.batch(records)).then(function () {\n            try {\n              return $return();\n            } catch ($boundEx) {\n              return $error($boundEx);\n            }\n          }, $error);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this), $error);\n    }.bind(this));\n  }\n\n  // *** Observing changes ***\n\n  /**\n   * Returns an `Rx.Observable` that emits a signal immediately upon subscription and then every time\n   * this record changes.\n   *\n   * Signals contain this record as its value for convenience.\n   *\n   * Emits `complete` signal if this record is deleted (marked as deleted or permanently destroyed)\n   */;\n  _proto.observe = function observe() {\n    (0, _invariant.default)('create' !== this._preparedState, \"Cannot observe uncommitted record\");\n    return this._getChanges();\n  }\n\n  /**\n   * Collection associated with this Model\n   */;\n  // TODO: protect batch,callWriter,... from being used outside a @reader/@writer\n  /**\n   * Convenience method that should ONLY be used by Model's `@writer`-decorated methods\n   *\n   * @see {Database#batch}\n   */\n  _proto.batch = function batch(...records) {\n    return this.db.batch(records);\n  }\n\n  /**\n   * Convenience method that should ONLY be used by Model's `@writer`-decorated methods\n   *\n   * @see {WriterInterface#callWriter}\n   */;\n  _proto.callWriter = function callWriter(action) {\n    return this.db._workQueue.subAction(action);\n  }\n\n  /**\n   * Convenience method that should ONLY be used by Model's `@writer`/`@reader`-decorated methods\n   *\n   * @see {ReaderInterface#callReader}\n   */;\n  _proto.callReader = function callReader(action) {\n    return this.db._workQueue.subAction(action);\n  }\n\n  // *** Implementation details ***\n\n  // Don't use this directly! Use `collection.create()`\n  ;\n  function Model(collection, raw) {\n    this._isEditing = false;\n    this._preparedState = null;\n    this.__changes = null;\n    this._subscribers = [];\n    this.collection = collection;\n    this._raw = raw;\n  }\n  Model._prepareCreate = function _prepareCreate(collection, recordBuilder) {\n    var record = new this(collection,\n    // sanitizedRaw sets id\n    (0, _RawRecord.sanitizedRaw)((0, _helpers2.createTimestampsFor)(this.prototype), collection.schema));\n    record._preparedState = 'create';\n    record._isEditing = true;\n    (0, _ensureSync.default)(recordBuilder(record));\n    record._isEditing = false;\n    return record;\n  };\n  Model._prepareCreateFromDirtyRaw = function _prepareCreateFromDirtyRaw(collection, dirtyRaw) {\n    var record = new this(collection, (0, _RawRecord.sanitizedRaw)(dirtyRaw, collection.schema));\n    record._preparedState = 'create';\n    return record;\n  };\n  Model._disposableFromDirtyRaw = function _disposableFromDirtyRaw(collection, dirtyRaw) {\n    var record = new this(collection, (0, _RawRecord.sanitizedRaw)(dirtyRaw, collection.schema));\n    record._raw._status = 'disposable';\n    return record;\n  };\n  /**\n   * Notifies `subscriber` on every change (update/delete) of this record\n   *\n   * Notification contains a flag that indicates whether the change is due to deletion\n   * (Currently, subscribers are called after `changes` emissions, but this behavior might change)\n   */\n  _proto.experimentalSubscribe = function experimentalSubscribe(subscriber, debugInfo) {\n    var _this2 = this;\n    var entry = [subscriber, debugInfo];\n    this._subscribers.push(entry);\n    return function () {\n      var idx = _this2._subscribers.indexOf(entry);\n      -1 !== idx && _this2._subscribers.splice(idx, 1);\n    };\n  };\n  _proto._notifyChanged = function _notifyChanged() {\n    this._getChanges().next(this);\n    this._subscribers.forEach(function ([subscriber]) {\n      subscriber(false);\n    });\n  };\n  _proto._notifyDestroyed = function _notifyDestroyed() {\n    this._getChanges().complete();\n    this._subscribers.forEach(function ([subscriber]) {\n      subscriber(true);\n    });\n  }\n\n  // TODO: Make this official API\n  ;\n  _proto._getRaw = function _getRaw(rawFieldName) {\n    return this._raw[rawFieldName];\n  }\n\n  // TODO: Make this official API\n  ;\n  _proto._setRaw = function _setRaw(rawFieldName, rawValue) {\n    this.__ensureCanSetRaw();\n    var valueBefore = this._raw[rawFieldName];\n    (0, _RawRecord.setRawSanitized)(this._raw, rawFieldName, rawValue, this.collection.schema.columns[rawFieldName]);\n    if (valueBefore !== this._raw[rawFieldName] && 'create' !== this._preparedState) {\n      (0, _helpers.setRawColumnChange)(this._raw, rawFieldName);\n    }\n  }\n\n  // Please don't use this unless you really understand how Watermelon Sync works, and thought long and\n  // hard about risks of inconsistency after sync\n  // TODO: Make this official API\n  ;\n  _proto._dangerouslySetRawWithoutMarkingColumnChange = function _dangerouslySetRawWithoutMarkingColumnChange(rawFieldName, rawValue) {\n    this.__ensureCanSetRaw();\n    (0, _RawRecord.setRawSanitized)(this._raw, rawFieldName, rawValue, this.collection.schema.columns[rawFieldName]);\n  };\n  _proto.__ensureCanSetRaw = function __ensureCanSetRaw() {\n    this.__ensureNotDisposable(\"Model._setRaw()\");\n    (0, _invariant.default)(this._isEditing, 'Not allowed to change record outside of create/update()');\n    (0, _invariant.default)(!this._getChanges().isStopped && 'deleted' !== this._raw._status, 'Not allowed to change deleted records');\n  };\n  _proto.__ensureNotDisposable = function __ensureNotDisposable(debugName) {\n    (0, _invariant.default)('disposable' !== this._raw._status, \"\".concat(debugName, \" cannot be called on a disposable record\"));\n  };\n  (0, _createClass2.default)(Model, [{\n    key: \"id\",\n    get: function get() {\n      return this._raw.id;\n    }\n\n    /**\n     * Record's sync status\n     *\n     * @see SyncStatus\n     */\n  }, {\n    key: \"syncStatus\",\n    get: function get() {\n      return this._raw._status;\n    }\n  }, {\n    key: \"collections\",\n    get:\n    // TODO: Deprecate\n    /**\n     * Collections of other Models in the same database as this record.\n     *\n     * @deprecated\n     */\n    function get() {\n      return this.database.collections;\n    }\n\n    // TODO: Deprecate\n  }, {\n    key: \"database\",\n    get: function get() {\n      return this.collection.database;\n    }\n\n    /**\n     * `Database` this record is associated with\n     */\n  }, {\n    key: \"db\",\n    get: function get() {\n      return this.collection.database;\n    }\n  }, {\n    key: \"asModel\",\n    get: function get() {\n      return this;\n    }\n\n    /**\n     * Table name of this record\n     */\n  }, {\n    key: \"table\",\n    get: function get() {\n      return this.constructor.table;\n    }\n  }]);\n  return Model;\n}();\nexports.default = Model;\nModel.associations = {};\nModel._wmelonTag = 'model';"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}