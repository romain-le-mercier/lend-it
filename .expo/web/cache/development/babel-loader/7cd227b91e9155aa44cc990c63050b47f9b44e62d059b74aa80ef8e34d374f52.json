{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _logError = _interopRequireDefault(require(\"../../../utils/common/logError\"));\nvar _invariant = _interopRequireDefault(require(\"../../../utils/common/invariant\"));\nvar _DatabaseDriver = _interopRequireDefault(require(\"./DatabaseDriver\"));\nvar DatabaseBridge = function () {\n  function DatabaseBridge(workerContext) {\n    var _this = this;\n    this.queue = [];\n    this._actionsExecuting = 0;\n    this.workerContext = workerContext;\n    this.workerContext.onmessage = function (e) {\n      var action = e.data;\n      _this.queue.push(action);\n      if (1 === _this.queue.length) {\n        _this.executeNext();\n      }\n    };\n  }\n  var _proto = DatabaseBridge.prototype;\n  _proto.executeNext = function executeNext() {\n    var action = this.queue[0];\n    try {\n      (0, _invariant.default)(0 === this._actionsExecuting, 'worker should not have ongoing actions');\n      this._actionsExecuting += 1;\n      var type = action.type,\n        payload = action.payload;\n      if ('setUp' === type || 'unsafeResetDatabase' === type) {\n        this.processActionAsync(action);\n      } else {\n        var response = this._driverAction(type).apply(void 0, (0, _toConsumableArray2.default)(payload));\n        this.onActionDone(action, {\n          value: response\n        });\n      }\n    } catch (error) {\n      this._onError(action, error);\n    }\n  };\n  _proto.processActionAsync = function processActionAsync(action) {\n    return new Promise(function ($return, $error) {\n      var type, payload, options, driver, response;\n      var $Try_2_Post = function $Try_2_Post() {\n        try {\n          return $return();\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      };\n      var $Try_2_Catch = function (error) {\n        try {\n          this._onError(action, error);\n          return $Try_2_Post();\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this);\n      try {\n        type = action.type;\n        payload = action.payload;\n        if ('setUp' === type) {\n          (0, _invariant.default)(!this.driver, \"Loki driver already set up - cannot set up again\");\n          var _payload = payload;\n          var _payload2 = _slicedToArray(_payload, 1);\n          options = _payload2[0];\n          driver = new _DatabaseDriver.default(options);\n          return Promise.resolve(driver.setUp()).then(function () {\n            try {\n              this.driver = driver;\n              this.onActionDone(action, {\n                value: null\n              });\n              return $If_4.call(this);\n            } catch ($boundEx) {\n              return $Try_2_Catch($boundEx);\n            }\n          }.bind(this), $Try_2_Catch);\n        } else {\n          return Promise.resolve(this._driverAction(type).apply(void 0, (0, _toConsumableArray2.default)(payload))).then(function ($await_6) {\n            try {\n              response = $await_6;\n              this.onActionDone(action, {\n                value: response\n              });\n              return $If_4.call(this);\n            } catch ($boundEx) {\n              return $Try_2_Catch($boundEx);\n            }\n          }.bind(this), $Try_2_Catch);\n        }\n        function $If_4() {\n          return $Try_2_Post();\n        }\n      } catch (error) {\n        $Try_2_Catch(error);\n      }\n    }.bind(this));\n  };\n  _proto.onActionDone = function onActionDone(action, result) {\n    (0, _invariant.default)(1 === this._actionsExecuting, 'worker should be executing 1 action');\n    this._actionsExecuting = 0;\n    this.queue.shift();\n    try {\n      var response = {\n        id: action.id,\n        result: result,\n        cloneMethod: action.returnCloneMethod\n      };\n      this.workerContext.postMessage(response);\n    } catch (error) {\n      (0, _logError.default)(error);\n    }\n    if (this.queue.length) {\n      this.executeNext();\n    }\n  };\n  _proto._driverAction = function _driverAction(type) {\n    (0, _invariant.default)(this.driver, \"Cannot run actions because driver is not set up\");\n    var action = this.driver[type].bind(this.driver);\n    (0, _invariant.default)(action, \"Unknown worker action \".concat(type));\n    return action;\n  };\n  _proto._onError = function _onError(action, error) {\n    (0, _logError.default)(error);\n    this.onActionDone(action, {\n      error: error\n    });\n  };\n  return DatabaseBridge;\n}();\nexports.default = DatabaseBridge;","map":{"version":3,"names":["_slicedToArray","require","_interopRequireDefault","exports","__esModule","default","_toConsumableArray2","_logError","_invariant","_DatabaseDriver","DatabaseBridge","workerContext","_this","queue","_actionsExecuting","onmessage","e","action","data","push","length","executeNext","_proto","prototype","type","payload","processActionAsync","response","_driverAction","apply","onActionDone","value","error","_onError","Promise","$return","$error","options","driver","$Try_2_Post","$boundEx","$Try_2_Catch","bind","_payload","_payload2","resolve","setUp","then","$If_4","call","$await_6","result","shift","id","cloneMethod","returnCloneMethod","postMessage","concat"],"sources":["/app/node_modules/@nozbe/watermelondb/adapters/lokijs/worker/DatabaseBridge.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _logError = _interopRequireDefault(require(\"../../../utils/common/logError\"));\nvar _invariant = _interopRequireDefault(require(\"../../../utils/common/invariant\"));\nvar _DatabaseDriver = _interopRequireDefault(require(\"./DatabaseDriver\"));\n// don't import whole `utils` to keep worker size small\nvar DatabaseBridge = /*#__PURE__*/function () {\n  function DatabaseBridge(workerContext) {\n    var _this = this;\n    this.queue = [];\n    this._actionsExecuting = 0;\n    this.workerContext = workerContext;\n    this.workerContext.onmessage = function (e) {\n      var action = e.data;\n      // enqueue action\n      _this.queue.push(action);\n      if (1 === _this.queue.length) {\n        _this.executeNext();\n      }\n    };\n  }\n  var _proto = DatabaseBridge.prototype;\n  _proto.executeNext = function executeNext() {\n    var action = this.queue[0];\n    try {\n      (0, _invariant.default)(0 === this._actionsExecuting, 'worker should not have ongoing actions'); // sanity check\n      this._actionsExecuting += 1;\n      var {\n        type: type,\n        payload: payload\n      } = action;\n      if ('setUp' === type || 'unsafeResetDatabase' === type) {\n        this.processActionAsync(action);\n      } else {\n        var response = this._driverAction(type).apply(void 0, (0, _toConsumableArray2.default)(payload));\n        this.onActionDone(action, {\n          value: response\n        });\n      }\n    } catch (error) {\n      this._onError(action, error);\n    }\n  };\n  _proto.processActionAsync = function processActionAsync(action) {\n    return new Promise(function ($return, $error) {\n      var type, payload, options, driver, response;\n      var $Try_2_Post = function () {\n        try {\n          return $return();\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      };\n      var $Try_2_Catch = function (error) {\n        try {\n          this._onError(action, error);\n          return $Try_2_Post();\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this);\n      try {\n        ({\n          type: type,\n          payload: payload\n        } = action);\n        if ('setUp' === type) {\n          // app just launched, set up driver with options sent\n          (0, _invariant.default)(!this.driver, \"Loki driver already set up - cannot set up again\");\n          [options] = payload;\n          driver = new _DatabaseDriver.default(options);\n          return Promise.resolve(driver.setUp()).then(function () {\n            try {\n              this.driver = driver;\n              this.onActionDone(action, {\n                value: null\n              });\n              return $If_4.call(this);\n            } catch ($boundEx) {\n              return $Try_2_Catch($boundEx);\n            }\n          }.bind(this), $Try_2_Catch);\n        } else {\n          return Promise.resolve(this._driverAction(type).apply(void 0, (0, _toConsumableArray2.default)(payload))).then(function ($await_6) {\n            try {\n              response = $await_6;\n              this.onActionDone(action, {\n                value: response\n              });\n              return $If_4.call(this);\n            } catch ($boundEx) {\n              return $Try_2_Catch($boundEx);\n            }\n          }.bind(this), $Try_2_Catch);\n        }\n        function $If_4() {\n          return $Try_2_Post();\n        }\n      } catch (error) {\n        $Try_2_Catch(error)\n      }\n    }.bind(this));\n  };\n  _proto.onActionDone = function onActionDone(action, result) {\n    (0, _invariant.default)(1 === this._actionsExecuting, 'worker should be executing 1 action'); // sanity check\n    this._actionsExecuting = 0;\n    this.queue.shift();\n    try {\n      var response = {\n        id: action.id,\n        result: result,\n        cloneMethod: action.returnCloneMethod\n      };\n      this.workerContext.postMessage(response);\n    } catch (error) {\n      (0, _logError.default)(error);\n    }\n    if (this.queue.length) {\n      this.executeNext();\n    }\n  };\n  _proto._driverAction = function _driverAction(type) {\n    (0, _invariant.default)(this.driver, \"Cannot run actions because driver is not set up\");\n    var action = this.driver[type].bind(this.driver);\n    (0, _invariant.default)(action, \"Unknown worker action \".concat(type));\n    return action;\n  };\n  _proto._onError = function _onError(action, error) {\n    // Main process only receives error message (when using web workers) — this logError is to retain call stack\n    (0, _logError.default)(error);\n    this.onActionDone(action, {\n      error: error\n    });\n  };\n  return DatabaseBridge;\n}();\nexports.default = DatabaseBridge;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}