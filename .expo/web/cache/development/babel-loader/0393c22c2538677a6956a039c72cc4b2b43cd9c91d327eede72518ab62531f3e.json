{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = lazy;\nfunction lazy(target, key, descriptor) {\n  var configurable = descriptor.configurable,\n    enumerable = descriptor.enumerable,\n    initializer = descriptor.initializer,\n    value = descriptor.value;\n  return {\n    configurable: configurable,\n    enumerable: enumerable,\n    get: function get() {\n      var that = this;\n      if (that === target) {\n        return undefined;\n      }\n      var returnValue = initializer ? initializer.call(that) : value;\n      Object.defineProperty(that, key, {\n        configurable: configurable,\n        enumerable: enumerable,\n        writable: true,\n        value: returnValue\n      });\n      return returnValue;\n    }\n  };\n}","map":{"version":3,"names":["exports","__esModule","default","lazy","target","key","descriptor","configurable","enumerable","initializer","value","get","that","undefined","returnValue","call","Object","defineProperty","writable"],"sources":["/app/node_modules/@nozbe/watermelondb/decorators/lazy/index.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = lazy;\n// Defines a property whose value is evaluated the first time it is accessed\n// For example:\n//\n// class X {\n//   @lazy date = new Date()\n// }\n//\n// `date` will be set to the current date not when constructed, but only when `xx.date` is called.\n// All subsequent calls will return the same value\nfunction lazy(target, key, descriptor) {\n  var {\n    configurable: configurable,\n    enumerable: enumerable,\n    initializer: initializer,\n    value: value\n  } = descriptor;\n  return {\n    configurable: configurable,\n    enumerable: enumerable,\n    get: function get() {\n      // $FlowFixMe\n      var that = this;\n      // This happens if someone accesses the\n      // property directly on the prototype\n      if (that === target) {\n        return undefined;\n      }\n      var returnValue = initializer ? initializer.call(that) : value;\n\n      // Next time this property is called, skip the decorator, and just return the precomputed value\n      Object.defineProperty(that, key, {\n        configurable: configurable,\n        enumerable: enumerable,\n        writable: true,\n        value: returnValue\n      });\n      return returnValue;\n    } // TODO: What should be the behavior on set?\n  };\n}\n\n// Implementation inspired by lazyInitialize from `core-decorators`"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACE,OAAO,GAAGC,IAAI;AAUtB,SAASA,IAAIA,CAACC,MAAM,EAAEC,GAAG,EAAEC,UAAU,EAAE;EACrC,IACgBC,YAAY,GAIxBD,UAAU,CAJZC,YAAY;IACAC,UAAU,GAGpBF,UAAU,CAHZE,UAAU;IACGC,WAAW,GAEtBH,UAAU,CAFZG,WAAW;IACJC,KAAK,GACVJ,UAAU,CADZI,KAAK;EAEP,OAAO;IACLH,YAAY,EAAEA,YAAY;IAC1BC,UAAU,EAAEA,UAAU;IACtBG,GAAG,EAAE,SAASA,GAAGA,CAAA,EAAG;MAElB,IAAIC,IAAI,GAAG,IAAI;MAGf,IAAIA,IAAI,KAAKR,MAAM,EAAE;QACnB,OAAOS,SAAS;MAClB;MACA,IAAIC,WAAW,GAAGL,WAAW,GAAGA,WAAW,CAACM,IAAI,CAACH,IAAI,CAAC,GAAGF,KAAK;MAG9DM,MAAM,CAACC,cAAc,CAACL,IAAI,EAAEP,GAAG,EAAE;QAC/BE,YAAY,EAAEA,YAAY;QAC1BC,UAAU,EAAEA,UAAU;QACtBU,QAAQ,EAAE,IAAI;QACdR,KAAK,EAAEI;MACT,CAAC,CAAC;MACF,OAAOA,WAAW;IACpB;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}